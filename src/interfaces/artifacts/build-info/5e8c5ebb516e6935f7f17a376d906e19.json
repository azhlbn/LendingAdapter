{
	"id": "5e8c5ebb516e6935f7f17a376d906e19",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/interfaces/IERC20Plus.sol": {
				"content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\ninterface IERC20Plus is IERC20Upgradeable {\n    function mint(address beneficiary, uint256 amount) external returns (bool);\n    function burn(address who, uint256 amount) external returns (bool);\n    function decimals() external view returns (uint8);\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://372b878d307d3eb3bd2948ad92653191f38fe0752069015a360466f9f64f6d23\",\"dweb:/ipfs/QmaAbXkUaTNWnG2pNJ3qfaM7nRbktzy7qiWbd1fFZbYvpT\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b78242734070278c66466c020a664119cd089b87f19e4113c2dec691429c6f3\",\"dweb:/ipfs/QmU5PCFRbhxkyx1XqANQJGKoshho4zCaVap11T5VjUNYmv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":1611:13472  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":1611:13472  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_51\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2549:2562  string memory */\n      0x60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2581:2586  _name */\n      0x36\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2574:2586  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2495:2593  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4864:4868  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4880:4893  address owner */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4896:4908  _msgSender() */\n      tag_71\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4896:4906  _msgSender */\n      tag_72\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4896:4908  _msgSender() */\n      jump\t// in\n    tag_71:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4880:4908  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      tag_73\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4927:4932  owner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4934:4941  spender */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4943:4949  amount */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4918:4926  _approve */\n      tag_74\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4918:4950  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4967:4971  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4960:4971  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4781:4978  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3653:3660  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3679:3691  _totalSupply */\n      sload(0x35)\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3672:3691  return _totalSupply */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3592:3698  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5637:5641  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5653:5668  address spender */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5671:5683  _msgSender() */\n      tag_77\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5671:5681  _msgSender */\n      tag_72\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5671:5683  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5653:5683  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5709:5713  from */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5715:5722  spender */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5724:5730  amount */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5693:5708  _spendAllowance */\n      tag_79\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5693:5731  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      tag_80\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5751:5755  from */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5757:5759  to */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5761:5767  amount */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5741:5750  _transfer */\n      tag_81\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5741:5768  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5785:5789  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5778:5789  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":5540:5796  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n    tag_35:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3499:3504  uint8 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3523:3525  18 */\n      0x12\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3516:3525  return 18 */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3441:3532  function decimals() public view virtual override returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6279:6283  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6295:6308  address owner */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6311:6323  _msgSender() */\n      tag_84\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6311:6321  _msgSender */\n      tag_72\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6311:6323  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6295:6323  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_85\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6342:6347  owner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6349:6356  spender */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6386:6396  addedValue */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      tag_86\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6368:6373  owner */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6375:6382  spender */\n      dup10\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6358:6367  allowance */\n      tag_61\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6358:6383  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6358:6396  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6333:6341  _approve */\n      tag_74\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6333:6397  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n    tag_85:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6414:6418  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6407:6418  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6191:6425  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_45:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3830:3837  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3856:3865  _balances */\n      0x33\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3866:3873  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3856:3874  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3849:3874  return _balances[account] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":3756:3881  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2762:2775  string memory */\n      0x60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2794:2801  _symbol */\n      0x37\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2787:2801  return _symbol */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_65\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_65\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":2706:2808  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7005:7009  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7021:7034  address owner */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7037:7049  _msgSender() */\n      tag_97\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7037:7047  _msgSender */\n      tag_72\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7037:7049  _msgSender() */\n      jump\t// in\n    tag_97:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7021:7049  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7059:7083  uint256 currentAllowance */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      tag_98\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7096:7101  owner */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7103:7110  spender */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7086:7095  allowance */\n      tag_61\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7086:7111  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7059:7111  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7149:7164  subtractedValue */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7129:7145  currentAllowance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7129:7164  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7121:7206  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_102\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7249:7254  owner */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7256:7263  spender */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7284:7299  subtractedValue */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7265:7281  currentAllowance */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7265:7299  currentAllowance - subtractedValue */\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7240:7248  _approve */\n      tag_74\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7240:7300  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_102:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7328:7332  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7321:7332  return true */\n      swap3\n      pop\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":6912:7339  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4156:4160  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4172:4185  address owner */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4188:4200  _msgSender() */\n      tag_104\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4188:4198  _msgSender */\n      tag_72\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4188:4200  _msgSender() */\n      jump\t// in\n    tag_104:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4172:4200  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      tag_105\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4220:4225  owner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4227:4229  to */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4231:4237  amount */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4210:4219  _transfer */\n      tag_81\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4210:4238  _transfer(owner, to, amount) */\n      jump\t// in\n    tag_105:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4255:4259  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4248:4259  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4077:4266  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4413:4420  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4439:4450  _allowances */\n      0x34\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4451:4456  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4439:4457  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4439:4466  _allowances[owner][spender] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4458:4465  spender */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4439:4466  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4432:4466  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":4324:4473  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n    tag_72:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":903:910  address */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":922:939  return msg.sender */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_74:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10912:10913  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10895:10914  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10895:10900  owner */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10895:10914  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10887:10955  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10992:10993  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10973:10994  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10973:10980  spender */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10973:10994  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10965:11033  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_113\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_112:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11074:11080  amount */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11044:11055  _allowances */\n      0x34\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11056:11061  owner */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11044:11062  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11044:11071  _allowances[owner][spender] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11063:11070  spender */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11044:11071  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11044:11080  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11111:11118  spender */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11104:11109  owner */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11120:11126  amount */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11095:11127  Approval(owner, spender, amount) */\n      mload(0x40)\n      tag_115\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":10794:11134  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_79:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11515:11539  uint256 currentAllowance */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      tag_117\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11552:11557  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11559:11566  spender */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11542:11551  allowance */\n      tag_61\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11542:11567  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11515:11567  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11601:11618  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11581:11597  currentAllowance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11581:11618  currentAllowance != type(uint256).max */\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11577:11820  if (currentAllowance != type(uint256).max) {... */\n      tag_118\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11662:11668  amount */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11642:11658  currentAllowance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11642:11668  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11634:11702  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11753:11758  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11760:11767  spender */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11788:11794  amount */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11769:11785  currentAllowance */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11769:11794  currentAllowance - amount */\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11744:11752  _approve */\n      tag_74\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11744:11795  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11577:11820  if (currentAllowance != type(uint256).max) {... */\n    tag_118:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":11415:11826  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7793:8581  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_81:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7905:7906  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7889:7907  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7889:7893  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7889:7907  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7881:7949  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7981:7982  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7967:7983  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7967:7969  to */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7967:7983  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7959:8023  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8034:8072  _beforeTokenTransfer(from, to, amount) */\n      tag_130\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8055:8059  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8061:8063  to */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8065:8071  amount */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8034:8054  _beforeTokenTransfer */\n      tag_131\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8034:8072  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_130:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8083:8102  uint256 fromBalance */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8105:8114  _balances */\n      0x33\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8115:8119  from */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8105:8120  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8083:8120  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8153:8159  amount */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8138:8149  fromBalance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8138:8159  fromBalance >= amount */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8130:8202  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_133\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8268:8274  amount */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8254:8265  fromBalance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8254:8274  fromBalance - amount */\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8236:8245  _balances */\n      0x33\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8246:8250  from */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8236:8251  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8236:8274  _balances[from] = fromBalance - amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8468:8474  amount */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8451:8460  _balances */\n      0x33\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8451:8464  _balances[to] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8461:8463  to */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8451:8464  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8451:8474  _balances[to] += amount */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8515:8517  to */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8509:8513  from */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8519:8525  amount */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8500:8526  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8537:8574  _afterTokenTransfer(from, to, amount) */\n      tag_136\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8557:8561  from */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8563:8565  to */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8567:8573  amount */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8537:8556  _afterTokenTransfer */\n      tag_137\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":8537:8574  _afterTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_136:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":7793:8581  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":12410:12501  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {} */\n    tag_131:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":13089:13179  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {} */\n    tag_137:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_141:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_143\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_144\n      jump\t// in\n    tag_143:\n        /* \"#utility.yul\":59:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:291   */\n    tag_145:\n        /* \"#utility.yul\":198:203   */\n      0x00\n        /* \"#utility.yul\":236:242   */\n      dup2\n        /* \"#utility.yul\":223:243   */\n      calldataload\n        /* \"#utility.yul\":214:243   */\n      swap1\n      pop\n        /* \"#utility.yul\":252:285   */\n      tag_147\n        /* \"#utility.yul\":279:284   */\n      dup2\n        /* \"#utility.yul\":252:285   */\n      tag_148\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":204:291   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":297:559   */\n    tag_44:\n        /* \"#utility.yul\":356:362   */\n      0x00\n        /* \"#utility.yul\":405:407   */\n      0x20\n        /* \"#utility.yul\":393:402   */\n      dup3\n        /* \"#utility.yul\":384:391   */\n      dup5\n        /* \"#utility.yul\":380:403   */\n      sub\n        /* \"#utility.yul\":376:408   */\n      slt\n        /* \"#utility.yul\":373:375   */\n      iszero\n      tag_150\n      jumpi\n        /* \"#utility.yul\":421:422   */\n      0x00\n        /* \"#utility.yul\":418:419   */\n      dup1\n        /* \"#utility.yul\":411:423   */\n      revert\n        /* \"#utility.yul\":373:375   */\n    tag_150:\n        /* \"#utility.yul\":464:465   */\n      0x00\n        /* \"#utility.yul\":489:542   */\n      tag_151\n        /* \"#utility.yul\":534:541   */\n      dup5\n        /* \"#utility.yul\":525:531   */\n      dup3\n        /* \"#utility.yul\":514:523   */\n      dup6\n        /* \"#utility.yul\":510:532   */\n      add\n        /* \"#utility.yul\":489:542   */\n      tag_141\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":479:542   */\n      swap2\n      pop\n        /* \"#utility.yul\":435:552   */\n      pop\n        /* \"#utility.yul\":363:559   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":565:972   */\n    tag_60:\n        /* \"#utility.yul\":633:639   */\n      0x00\n        /* \"#utility.yul\":641:647   */\n      dup1\n        /* \"#utility.yul\":690:692   */\n      0x40\n        /* \"#utility.yul\":678:687   */\n      dup4\n        /* \"#utility.yul\":669:676   */\n      dup6\n        /* \"#utility.yul\":665:688   */\n      sub\n        /* \"#utility.yul\":661:693   */\n      slt\n        /* \"#utility.yul\":658:660   */\n      iszero\n      tag_153\n      jumpi\n        /* \"#utility.yul\":706:707   */\n      0x00\n        /* \"#utility.yul\":703:704   */\n      dup1\n        /* \"#utility.yul\":696:708   */\n      revert\n        /* \"#utility.yul\":658:660   */\n    tag_153:\n        /* \"#utility.yul\":749:750   */\n      0x00\n        /* \"#utility.yul\":774:827   */\n      tag_154\n        /* \"#utility.yul\":819:826   */\n      dup6\n        /* \"#utility.yul\":810:816   */\n      dup3\n        /* \"#utility.yul\":799:808   */\n      dup7\n        /* \"#utility.yul\":795:817   */\n      add\n        /* \"#utility.yul\":774:827   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":764:827   */\n      swap3\n      pop\n        /* \"#utility.yul\":720:837   */\n      pop\n        /* \"#utility.yul\":876:878   */\n      0x20\n        /* \"#utility.yul\":902:955   */\n      tag_155\n        /* \"#utility.yul\":947:954   */\n      dup6\n        /* \"#utility.yul\":938:944   */\n      dup3\n        /* \"#utility.yul\":927:936   */\n      dup7\n        /* \"#utility.yul\":923:945   */\n      add\n        /* \"#utility.yul\":902:955   */\n      tag_141\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":892:955   */\n      swap2\n      pop\n        /* \"#utility.yul\":847:965   */\n      pop\n        /* \"#utility.yul\":648:972   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":978:1530   */\n    tag_31:\n        /* \"#utility.yul\":1055:1061   */\n      0x00\n        /* \"#utility.yul\":1063:1069   */\n      dup1\n        /* \"#utility.yul\":1071:1077   */\n      0x00\n        /* \"#utility.yul\":1120:1122   */\n      0x60\n        /* \"#utility.yul\":1108:1117   */\n      dup5\n        /* \"#utility.yul\":1099:1106   */\n      dup7\n        /* \"#utility.yul\":1095:1118   */\n      sub\n        /* \"#utility.yul\":1091:1123   */\n      slt\n        /* \"#utility.yul\":1088:1090   */\n      iszero\n      tag_157\n      jumpi\n        /* \"#utility.yul\":1136:1137   */\n      0x00\n        /* \"#utility.yul\":1133:1134   */\n      dup1\n        /* \"#utility.yul\":1126:1138   */\n      revert\n        /* \"#utility.yul\":1088:1090   */\n    tag_157:\n        /* \"#utility.yul\":1179:1180   */\n      0x00\n        /* \"#utility.yul\":1204:1257   */\n      tag_158\n        /* \"#utility.yul\":1249:1256   */\n      dup7\n        /* \"#utility.yul\":1240:1246   */\n      dup3\n        /* \"#utility.yul\":1229:1238   */\n      dup8\n        /* \"#utility.yul\":1225:1247   */\n      add\n        /* \"#utility.yul\":1204:1257   */\n      tag_141\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":1194:1257   */\n      swap4\n      pop\n        /* \"#utility.yul\":1150:1267   */\n      pop\n        /* \"#utility.yul\":1306:1308   */\n      0x20\n        /* \"#utility.yul\":1332:1385   */\n      tag_159\n        /* \"#utility.yul\":1377:1384   */\n      dup7\n        /* \"#utility.yul\":1368:1374   */\n      dup3\n        /* \"#utility.yul\":1357:1366   */\n      dup8\n        /* \"#utility.yul\":1353:1375   */\n      add\n        /* \"#utility.yul\":1332:1385   */\n      tag_141\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":1322:1385   */\n      swap3\n      pop\n        /* \"#utility.yul\":1277:1395   */\n      pop\n        /* \"#utility.yul\":1434:1436   */\n      0x40\n        /* \"#utility.yul\":1460:1513   */\n      tag_160\n        /* \"#utility.yul\":1505:1512   */\n      dup7\n        /* \"#utility.yul\":1496:1502   */\n      dup3\n        /* \"#utility.yul\":1485:1494   */\n      dup8\n        /* \"#utility.yul\":1481:1503   */\n      add\n        /* \"#utility.yul\":1460:1513   */\n      tag_145\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":1450:1513   */\n      swap2\n      pop\n        /* \"#utility.yul\":1405:1523   */\n      pop\n        /* \"#utility.yul\":1078:1530   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1536:1943   */\n    tag_21:\n        /* \"#utility.yul\":1604:1610   */\n      0x00\n        /* \"#utility.yul\":1612:1618   */\n      dup1\n        /* \"#utility.yul\":1661:1663   */\n      0x40\n        /* \"#utility.yul\":1649:1658   */\n      dup4\n        /* \"#utility.yul\":1640:1647   */\n      dup6\n        /* \"#utility.yul\":1636:1659   */\n      sub\n        /* \"#utility.yul\":1632:1664   */\n      slt\n        /* \"#utility.yul\":1629:1631   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1677:1678   */\n      0x00\n        /* \"#utility.yul\":1674:1675   */\n      dup1\n        /* \"#utility.yul\":1667:1679   */\n      revert\n        /* \"#utility.yul\":1629:1631   */\n    tag_162:\n        /* \"#utility.yul\":1720:1721   */\n      0x00\n        /* \"#utility.yul\":1745:1798   */\n      tag_163\n        /* \"#utility.yul\":1790:1797   */\n      dup6\n        /* \"#utility.yul\":1781:1787   */\n      dup3\n        /* \"#utility.yul\":1770:1779   */\n      dup7\n        /* \"#utility.yul\":1766:1788   */\n      add\n        /* \"#utility.yul\":1745:1798   */\n      tag_141\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":1735:1798   */\n      swap3\n      pop\n        /* \"#utility.yul\":1691:1808   */\n      pop\n        /* \"#utility.yul\":1847:1849   */\n      0x20\n        /* \"#utility.yul\":1873:1926   */\n      tag_164\n        /* \"#utility.yul\":1918:1925   */\n      dup6\n        /* \"#utility.yul\":1909:1915   */\n      dup3\n        /* \"#utility.yul\":1898:1907   */\n      dup7\n        /* \"#utility.yul\":1894:1916   */\n      add\n        /* \"#utility.yul\":1873:1926   */\n      tag_145\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":1863:1926   */\n      swap2\n      pop\n        /* \"#utility.yul\":1818:1936   */\n      pop\n        /* \"#utility.yul\":1619:1943   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1949:2058   */\n    tag_165:\n        /* \"#utility.yul\":2030:2051   */\n      tag_167\n        /* \"#utility.yul\":2045:2050   */\n      dup2\n        /* \"#utility.yul\":2030:2051   */\n      tag_168\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":2025:2028   */\n      dup3\n        /* \"#utility.yul\":2018:2052   */\n      mstore\n        /* \"#utility.yul\":2008:2058   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2064:2428   */\n    tag_169:\n        /* \"#utility.yul\":2152:2155   */\n      0x00\n        /* \"#utility.yul\":2180:2219   */\n      tag_171\n        /* \"#utility.yul\":2213:2218   */\n      dup3\n        /* \"#utility.yul\":2180:2219   */\n      tag_172\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":2235:2306   */\n      tag_173\n        /* \"#utility.yul\":2299:2305   */\n      dup2\n        /* \"#utility.yul\":2294:2297   */\n      dup6\n        /* \"#utility.yul\":2235:2306   */\n      tag_174\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":2228:2306   */\n      swap4\n      pop\n        /* \"#utility.yul\":2315:2367   */\n      tag_175\n        /* \"#utility.yul\":2360:2366   */\n      dup2\n        /* \"#utility.yul\":2355:2358   */\n      dup6\n        /* \"#utility.yul\":2348:2352   */\n      0x20\n        /* \"#utility.yul\":2341:2346   */\n      dup7\n        /* \"#utility.yul\":2337:2353   */\n      add\n        /* \"#utility.yul\":2315:2367   */\n      tag_176\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":2392:2421   */\n      tag_177\n        /* \"#utility.yul\":2414:2420   */\n      dup2\n        /* \"#utility.yul\":2392:2421   */\n      tag_178\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":2387:2390   */\n      dup5\n        /* \"#utility.yul\":2383:2422   */\n      add\n        /* \"#utility.yul\":2376:2422   */\n      swap2\n      pop\n        /* \"#utility.yul\":2156:2428   */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2434:2800   */\n    tag_179:\n        /* \"#utility.yul\":2576:2579   */\n      0x00\n        /* \"#utility.yul\":2597:2664   */\n      tag_181\n        /* \"#utility.yul\":2661:2663   */\n      0x23\n        /* \"#utility.yul\":2656:2659   */\n      dup4\n        /* \"#utility.yul\":2597:2664   */\n      tag_174\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":2590:2664   */\n      swap2\n      pop\n        /* \"#utility.yul\":2673:2766   */\n      tag_182\n        /* \"#utility.yul\":2762:2765   */\n      dup3\n        /* \"#utility.yul\":2673:2766   */\n      tag_183\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":2791:2793   */\n      0x40\n        /* \"#utility.yul\":2786:2789   */\n      dup3\n        /* \"#utility.yul\":2782:2794   */\n      add\n        /* \"#utility.yul\":2775:2794   */\n      swap1\n      pop\n        /* \"#utility.yul\":2580:2800   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2806:3172   */\n    tag_184:\n        /* \"#utility.yul\":2948:2951   */\n      0x00\n        /* \"#utility.yul\":2969:3036   */\n      tag_186\n        /* \"#utility.yul\":3033:3035   */\n      0x22\n        /* \"#utility.yul\":3028:3031   */\n      dup4\n        /* \"#utility.yul\":2969:3036   */\n      tag_174\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":2962:3036   */\n      swap2\n      pop\n        /* \"#utility.yul\":3045:3138   */\n      tag_187\n        /* \"#utility.yul\":3134:3137   */\n      dup3\n        /* \"#utility.yul\":3045:3138   */\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":3163:3165   */\n      0x40\n        /* \"#utility.yul\":3158:3161   */\n      dup3\n        /* \"#utility.yul\":3154:3166   */\n      add\n        /* \"#utility.yul\":3147:3166   */\n      swap1\n      pop\n        /* \"#utility.yul\":2952:3172   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3178:3544   */\n    tag_189:\n        /* \"#utility.yul\":3320:3323   */\n      0x00\n        /* \"#utility.yul\":3341:3408   */\n      tag_191\n        /* \"#utility.yul\":3405:3407   */\n      0x1d\n        /* \"#utility.yul\":3400:3403   */\n      dup4\n        /* \"#utility.yul\":3341:3408   */\n      tag_174\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":3334:3408   */\n      swap2\n      pop\n        /* \"#utility.yul\":3417:3510   */\n      tag_192\n        /* \"#utility.yul\":3506:3509   */\n      dup3\n        /* \"#utility.yul\":3417:3510   */\n      tag_193\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":3535:3537   */\n      0x20\n        /* \"#utility.yul\":3530:3533   */\n      dup3\n        /* \"#utility.yul\":3526:3538   */\n      add\n        /* \"#utility.yul\":3519:3538   */\n      swap1\n      pop\n        /* \"#utility.yul\":3324:3544   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3550:3916   */\n    tag_194:\n        /* \"#utility.yul\":3692:3695   */\n      0x00\n        /* \"#utility.yul\":3713:3780   */\n      tag_196\n        /* \"#utility.yul\":3777:3779   */\n      0x26\n        /* \"#utility.yul\":3772:3775   */\n      dup4\n        /* \"#utility.yul\":3713:3780   */\n      tag_174\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":3706:3780   */\n      swap2\n      pop\n        /* \"#utility.yul\":3789:3882   */\n      tag_197\n        /* \"#utility.yul\":3878:3881   */\n      dup3\n        /* \"#utility.yul\":3789:3882   */\n      tag_198\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":3907:3909   */\n      0x40\n        /* \"#utility.yul\":3902:3905   */\n      dup3\n        /* \"#utility.yul\":3898:3910   */\n      add\n        /* \"#utility.yul\":3891:3910   */\n      swap1\n      pop\n        /* \"#utility.yul\":3696:3916   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3922:4288   */\n    tag_199:\n        /* \"#utility.yul\":4064:4067   */\n      0x00\n        /* \"#utility.yul\":4085:4152   */\n      tag_201\n        /* \"#utility.yul\":4149:4151   */\n      0x25\n        /* \"#utility.yul\":4144:4147   */\n      dup4\n        /* \"#utility.yul\":4085:4152   */\n      tag_174\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":4078:4152   */\n      swap2\n      pop\n        /* \"#utility.yul\":4161:4254   */\n      tag_202\n        /* \"#utility.yul\":4250:4253   */\n      dup3\n        /* \"#utility.yul\":4161:4254   */\n      tag_203\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":4279:4281   */\n      0x40\n        /* \"#utility.yul\":4274:4277   */\n      dup3\n        /* \"#utility.yul\":4270:4282   */\n      add\n        /* \"#utility.yul\":4263:4282   */\n      swap1\n      pop\n        /* \"#utility.yul\":4068:4288   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4294:4660   */\n    tag_204:\n        /* \"#utility.yul\":4436:4439   */\n      0x00\n        /* \"#utility.yul\":4457:4524   */\n      tag_206\n        /* \"#utility.yul\":4521:4523   */\n      0x24\n        /* \"#utility.yul\":4516:4519   */\n      dup4\n        /* \"#utility.yul\":4457:4524   */\n      tag_174\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":4450:4524   */\n      swap2\n      pop\n        /* \"#utility.yul\":4533:4626   */\n      tag_207\n        /* \"#utility.yul\":4622:4625   */\n      dup3\n        /* \"#utility.yul\":4533:4626   */\n      tag_208\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":4651:4653   */\n      0x40\n        /* \"#utility.yul\":4646:4649   */\n      dup3\n        /* \"#utility.yul\":4642:4654   */\n      add\n        /* \"#utility.yul\":4635:4654   */\n      swap1\n      pop\n        /* \"#utility.yul\":4440:4660   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4666:5032   */\n    tag_209:\n        /* \"#utility.yul\":4808:4811   */\n      0x00\n        /* \"#utility.yul\":4829:4896   */\n      tag_211\n        /* \"#utility.yul\":4893:4895   */\n      0x25\n        /* \"#utility.yul\":4888:4891   */\n      dup4\n        /* \"#utility.yul\":4829:4896   */\n      tag_174\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":4822:4896   */\n      swap2\n      pop\n        /* \"#utility.yul\":4905:4998   */\n      tag_212\n        /* \"#utility.yul\":4994:4997   */\n      dup3\n        /* \"#utility.yul\":4905:4998   */\n      tag_213\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":5023:5025   */\n      0x40\n        /* \"#utility.yul\":5018:5021   */\n      dup3\n        /* \"#utility.yul\":5014:5026   */\n      add\n        /* \"#utility.yul\":5007:5026   */\n      swap1\n      pop\n        /* \"#utility.yul\":4812:5032   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5038:5156   */\n    tag_214:\n        /* \"#utility.yul\":5125:5149   */\n      tag_216\n        /* \"#utility.yul\":5143:5148   */\n      dup2\n        /* \"#utility.yul\":5125:5149   */\n      tag_217\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":5120:5123   */\n      dup3\n        /* \"#utility.yul\":5113:5150   */\n      mstore\n        /* \"#utility.yul\":5103:5156   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5162:5274   */\n    tag_218:\n        /* \"#utility.yul\":5245:5267   */\n      tag_220\n        /* \"#utility.yul\":5261:5266   */\n      dup2\n        /* \"#utility.yul\":5245:5267   */\n      tag_221\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":5240:5243   */\n      dup3\n        /* \"#utility.yul\":5233:5268   */\n      mstore\n        /* \"#utility.yul\":5223:5274   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5280:5490   */\n    tag_24:\n        /* \"#utility.yul\":5367:5371   */\n      0x00\n        /* \"#utility.yul\":5405:5407   */\n      0x20\n        /* \"#utility.yul\":5394:5403   */\n      dup3\n        /* \"#utility.yul\":5390:5408   */\n      add\n        /* \"#utility.yul\":5382:5408   */\n      swap1\n      pop\n        /* \"#utility.yul\":5418:5483   */\n      tag_223\n        /* \"#utility.yul\":5480:5481   */\n      0x00\n        /* \"#utility.yul\":5469:5478   */\n      dup4\n        /* \"#utility.yul\":5465:5482   */\n      add\n        /* \"#utility.yul\":5456:5462   */\n      dup5\n        /* \"#utility.yul\":5418:5483   */\n      tag_165\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":5372:5490   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5496:5809   */\n    tag_18:\n        /* \"#utility.yul\":5609:5613   */\n      0x00\n        /* \"#utility.yul\":5647:5649   */\n      0x20\n        /* \"#utility.yul\":5636:5645   */\n      dup3\n        /* \"#utility.yul\":5632:5650   */\n      add\n        /* \"#utility.yul\":5624:5650   */\n      swap1\n      pop\n        /* \"#utility.yul\":5696:5705   */\n      dup2\n        /* \"#utility.yul\":5690:5694   */\n      dup2\n        /* \"#utility.yul\":5686:5706   */\n      sub\n        /* \"#utility.yul\":5682:5683   */\n      0x00\n        /* \"#utility.yul\":5671:5680   */\n      dup4\n        /* \"#utility.yul\":5667:5684   */\n      add\n        /* \"#utility.yul\":5660:5707   */\n      mstore\n        /* \"#utility.yul\":5724:5802   */\n      tag_225\n        /* \"#utility.yul\":5797:5801   */\n      dup2\n        /* \"#utility.yul\":5788:5794   */\n      dup5\n        /* \"#utility.yul\":5724:5802   */\n      tag_169\n      jump\t// in\n    tag_225:\n        /* \"#utility.yul\":5716:5802   */\n      swap1\n      pop\n        /* \"#utility.yul\":5614:5809   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5815:6234   */\n    tag_129:\n        /* \"#utility.yul\":5981:5985   */\n      0x00\n        /* \"#utility.yul\":6019:6021   */\n      0x20\n        /* \"#utility.yul\":6008:6017   */\n      dup3\n        /* \"#utility.yul\":6004:6022   */\n      add\n        /* \"#utility.yul\":5996:6022   */\n      swap1\n      pop\n        /* \"#utility.yul\":6068:6077   */\n      dup2\n        /* \"#utility.yul\":6062:6066   */\n      dup2\n        /* \"#utility.yul\":6058:6078   */\n      sub\n        /* \"#utility.yul\":6054:6055   */\n      0x00\n        /* \"#utility.yul\":6043:6052   */\n      dup4\n        /* \"#utility.yul\":6039:6056   */\n      add\n        /* \"#utility.yul\":6032:6079   */\n      mstore\n        /* \"#utility.yul\":6096:6227   */\n      tag_227\n        /* \"#utility.yul\":6222:6226   */\n      dup2\n        /* \"#utility.yul\":6096:6227   */\n      tag_179\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":6088:6227   */\n      swap1\n      pop\n        /* \"#utility.yul\":5986:6234   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6240:6659   */\n    tag_114:\n        /* \"#utility.yul\":6406:6410   */\n      0x00\n        /* \"#utility.yul\":6444:6446   */\n      0x20\n        /* \"#utility.yul\":6433:6442   */\n      dup3\n        /* \"#utility.yul\":6429:6447   */\n      add\n        /* \"#utility.yul\":6421:6447   */\n      swap1\n      pop\n        /* \"#utility.yul\":6493:6502   */\n      dup2\n        /* \"#utility.yul\":6487:6491   */\n      dup2\n        /* \"#utility.yul\":6483:6503   */\n      sub\n        /* \"#utility.yul\":6479:6480   */\n      0x00\n        /* \"#utility.yul\":6468:6477   */\n      dup4\n        /* \"#utility.yul\":6464:6481   */\n      add\n        /* \"#utility.yul\":6457:6504   */\n      mstore\n        /* \"#utility.yul\":6521:6652   */\n      tag_229\n        /* \"#utility.yul\":6647:6651   */\n      dup2\n        /* \"#utility.yul\":6521:6652   */\n      tag_184\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":6513:6652   */\n      swap1\n      pop\n        /* \"#utility.yul\":6411:6659   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6665:7084   */\n    tag_121:\n        /* \"#utility.yul\":6831:6835   */\n      0x00\n        /* \"#utility.yul\":6869:6871   */\n      0x20\n        /* \"#utility.yul\":6858:6867   */\n      dup3\n        /* \"#utility.yul\":6854:6872   */\n      add\n        /* \"#utility.yul\":6846:6872   */\n      swap1\n      pop\n        /* \"#utility.yul\":6918:6927   */\n      dup2\n        /* \"#utility.yul\":6912:6916   */\n      dup2\n        /* \"#utility.yul\":6908:6928   */\n      sub\n        /* \"#utility.yul\":6904:6905   */\n      0x00\n        /* \"#utility.yul\":6893:6902   */\n      dup4\n        /* \"#utility.yul\":6889:6906   */\n      add\n        /* \"#utility.yul\":6882:6929   */\n      mstore\n        /* \"#utility.yul\":6946:7077   */\n      tag_231\n        /* \"#utility.yul\":7072:7076   */\n      dup2\n        /* \"#utility.yul\":6946:7077   */\n      tag_189\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":6938:7077   */\n      swap1\n      pop\n        /* \"#utility.yul\":6836:7084   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7090:7509   */\n    tag_134:\n        /* \"#utility.yul\":7256:7260   */\n      0x00\n        /* \"#utility.yul\":7294:7296   */\n      0x20\n        /* \"#utility.yul\":7283:7292   */\n      dup3\n        /* \"#utility.yul\":7279:7297   */\n      add\n        /* \"#utility.yul\":7271:7297   */\n      swap1\n      pop\n        /* \"#utility.yul\":7343:7352   */\n      dup2\n        /* \"#utility.yul\":7337:7341   */\n      dup2\n        /* \"#utility.yul\":7333:7353   */\n      sub\n        /* \"#utility.yul\":7329:7330   */\n      0x00\n        /* \"#utility.yul\":7318:7327   */\n      dup4\n        /* \"#utility.yul\":7314:7331   */\n      add\n        /* \"#utility.yul\":7307:7354   */\n      mstore\n        /* \"#utility.yul\":7371:7502   */\n      tag_233\n        /* \"#utility.yul\":7497:7501   */\n      dup2\n        /* \"#utility.yul\":7371:7502   */\n      tag_194\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":7363:7502   */\n      swap1\n      pop\n        /* \"#utility.yul\":7261:7509   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7515:7934   */\n    tag_126:\n        /* \"#utility.yul\":7681:7685   */\n      0x00\n        /* \"#utility.yul\":7719:7721   */\n      0x20\n        /* \"#utility.yul\":7708:7717   */\n      dup3\n        /* \"#utility.yul\":7704:7722   */\n      add\n        /* \"#utility.yul\":7696:7722   */\n      swap1\n      pop\n        /* \"#utility.yul\":7768:7777   */\n      dup2\n        /* \"#utility.yul\":7762:7766   */\n      dup2\n        /* \"#utility.yul\":7758:7778   */\n      sub\n        /* \"#utility.yul\":7754:7755   */\n      0x00\n        /* \"#utility.yul\":7743:7752   */\n      dup4\n        /* \"#utility.yul\":7739:7756   */\n      add\n        /* \"#utility.yul\":7732:7779   */\n      mstore\n        /* \"#utility.yul\":7796:7927   */\n      tag_235\n        /* \"#utility.yul\":7922:7926   */\n      dup2\n        /* \"#utility.yul\":7796:7927   */\n      tag_199\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":7788:7927   */\n      swap1\n      pop\n        /* \"#utility.yul\":7686:7934   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7940:8359   */\n    tag_111:\n        /* \"#utility.yul\":8106:8110   */\n      0x00\n        /* \"#utility.yul\":8144:8146   */\n      0x20\n        /* \"#utility.yul\":8133:8142   */\n      dup3\n        /* \"#utility.yul\":8129:8147   */\n      add\n        /* \"#utility.yul\":8121:8147   */\n      swap1\n      pop\n        /* \"#utility.yul\":8193:8202   */\n      dup2\n        /* \"#utility.yul\":8187:8191   */\n      dup2\n        /* \"#utility.yul\":8183:8203   */\n      sub\n        /* \"#utility.yul\":8179:8180   */\n      0x00\n        /* \"#utility.yul\":8168:8177   */\n      dup4\n        /* \"#utility.yul\":8164:8181   */\n      add\n        /* \"#utility.yul\":8157:8204   */\n      mstore\n        /* \"#utility.yul\":8221:8352   */\n      tag_237\n        /* \"#utility.yul\":8347:8351   */\n      dup2\n        /* \"#utility.yul\":8221:8352   */\n      tag_204\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":8213:8352   */\n      swap1\n      pop\n        /* \"#utility.yul\":8111:8359   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8365:8784   */\n    tag_101:\n        /* \"#utility.yul\":8531:8535   */\n      0x00\n        /* \"#utility.yul\":8569:8571   */\n      0x20\n        /* \"#utility.yul\":8558:8567   */\n      dup3\n        /* \"#utility.yul\":8554:8572   */\n      add\n        /* \"#utility.yul\":8546:8572   */\n      swap1\n      pop\n        /* \"#utility.yul\":8618:8627   */\n      dup2\n        /* \"#utility.yul\":8612:8616   */\n      dup2\n        /* \"#utility.yul\":8608:8628   */\n      sub\n        /* \"#utility.yul\":8604:8605   */\n      0x00\n        /* \"#utility.yul\":8593:8602   */\n      dup4\n        /* \"#utility.yul\":8589:8606   */\n      add\n        /* \"#utility.yul\":8582:8629   */\n      mstore\n        /* \"#utility.yul\":8646:8777   */\n      tag_239\n        /* \"#utility.yul\":8772:8776   */\n      dup2\n        /* \"#utility.yul\":8646:8777   */\n      tag_209\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":8638:8777   */\n      swap1\n      pop\n        /* \"#utility.yul\":8536:8784   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8790:9012   */\n    tag_28:\n        /* \"#utility.yul\":8883:8887   */\n      0x00\n        /* \"#utility.yul\":8921:8923   */\n      0x20\n        /* \"#utility.yul\":8910:8919   */\n      dup3\n        /* \"#utility.yul\":8906:8924   */\n      add\n        /* \"#utility.yul\":8898:8924   */\n      swap1\n      pop\n        /* \"#utility.yul\":8934:9005   */\n      tag_241\n        /* \"#utility.yul\":9002:9003   */\n      0x00\n        /* \"#utility.yul\":8991:9000   */\n      dup4\n        /* \"#utility.yul\":8987:9004   */\n      add\n        /* \"#utility.yul\":8978:8984   */\n      dup5\n        /* \"#utility.yul\":8934:9005   */\n      tag_214\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":8888:9012   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9018:9232   */\n    tag_37:\n        /* \"#utility.yul\":9107:9111   */\n      0x00\n        /* \"#utility.yul\":9145:9147   */\n      0x20\n        /* \"#utility.yul\":9134:9143   */\n      dup3\n        /* \"#utility.yul\":9130:9148   */\n      add\n        /* \"#utility.yul\":9122:9148   */\n      swap1\n      pop\n        /* \"#utility.yul\":9158:9225   */\n      tag_243\n        /* \"#utility.yul\":9222:9223   */\n      0x00\n        /* \"#utility.yul\":9211:9220   */\n      dup4\n        /* \"#utility.yul\":9207:9224   */\n      add\n        /* \"#utility.yul\":9198:9204   */\n      dup5\n        /* \"#utility.yul\":9158:9225   */\n      tag_218\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":9112:9232   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9238:9337   */\n    tag_172:\n        /* \"#utility.yul\":9290:9296   */\n      0x00\n        /* \"#utility.yul\":9324:9329   */\n      dup2\n        /* \"#utility.yul\":9318:9330   */\n      mload\n        /* \"#utility.yul\":9308:9330   */\n      swap1\n      pop\n        /* \"#utility.yul\":9297:9337   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9343:9512   */\n    tag_174:\n        /* \"#utility.yul\":9427:9438   */\n      0x00\n        /* \"#utility.yul\":9461:9467   */\n      dup3\n        /* \"#utility.yul\":9456:9459   */\n      dup3\n        /* \"#utility.yul\":9449:9468   */\n      mstore\n        /* \"#utility.yul\":9501:9505   */\n      0x20\n        /* \"#utility.yul\":9496:9499   */\n      dup3\n        /* \"#utility.yul\":9492:9506   */\n      add\n        /* \"#utility.yul\":9477:9506   */\n      swap1\n      pop\n        /* \"#utility.yul\":9439:9512   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9518:9823   */\n    tag_88:\n        /* \"#utility.yul\":9558:9561   */\n      0x00\n        /* \"#utility.yul\":9577:9597   */\n      tag_247\n        /* \"#utility.yul\":9595:9596   */\n      dup3\n        /* \"#utility.yul\":9577:9597   */\n      tag_217\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":9572:9597   */\n      swap2\n      pop\n        /* \"#utility.yul\":9611:9631   */\n      tag_248\n        /* \"#utility.yul\":9629:9630   */\n      dup4\n        /* \"#utility.yul\":9611:9631   */\n      tag_217\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":9606:9631   */\n      swap3\n      pop\n        /* \"#utility.yul\":9765:9766   */\n      dup3\n        /* \"#utility.yul\":9697:9763   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":9693:9767   */\n      sub\n        /* \"#utility.yul\":9690:9691   */\n      dup3\n        /* \"#utility.yul\":9687:9768   */\n      gt\n        /* \"#utility.yul\":9684:9686   */\n      iszero\n      tag_249\n      jumpi\n        /* \"#utility.yul\":9771:9789   */\n      tag_250\n      tag_251\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":9684:9686   */\n    tag_249:\n        /* \"#utility.yul\":9815:9816   */\n      dup3\n        /* \"#utility.yul\":9812:9813   */\n      dup3\n        /* \"#utility.yul\":9808:9817   */\n      add\n        /* \"#utility.yul\":9801:9817   */\n      swap1\n      pop\n        /* \"#utility.yul\":9562:9823   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9829:9925   */\n    tag_252:\n        /* \"#utility.yul\":9866:9873   */\n      0x00\n        /* \"#utility.yul\":9895:9919   */\n      tag_254\n        /* \"#utility.yul\":9913:9918   */\n      dup3\n        /* \"#utility.yul\":9895:9919   */\n      tag_255\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":9884:9919   */\n      swap1\n      pop\n        /* \"#utility.yul\":9874:9925   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9931:10021   */\n    tag_168:\n        /* \"#utility.yul\":9965:9972   */\n      0x00\n        /* \"#utility.yul\":10008:10013   */\n      dup2\n        /* \"#utility.yul\":10001:10014   */\n      iszero\n        /* \"#utility.yul\":9994:10015   */\n      iszero\n        /* \"#utility.yul\":9983:10015   */\n      swap1\n      pop\n        /* \"#utility.yul\":9973:10021   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10027:10153   */\n    tag_255:\n        /* \"#utility.yul\":10064:10071   */\n      0x00\n        /* \"#utility.yul\":10104:10146   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":10097:10102   */\n      dup3\n        /* \"#utility.yul\":10093:10147   */\n      and\n        /* \"#utility.yul\":10082:10147   */\n      swap1\n      pop\n        /* \"#utility.yul\":10072:10153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10159:10236   */\n    tag_217:\n        /* \"#utility.yul\":10196:10203   */\n      0x00\n        /* \"#utility.yul\":10225:10230   */\n      dup2\n        /* \"#utility.yul\":10214:10230   */\n      swap1\n      pop\n        /* \"#utility.yul\":10204:10236   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10242:10328   */\n    tag_221:\n        /* \"#utility.yul\":10277:10284   */\n      0x00\n        /* \"#utility.yul\":10317:10321   */\n      0xff\n        /* \"#utility.yul\":10310:10315   */\n      dup3\n        /* \"#utility.yul\":10306:10322   */\n      and\n        /* \"#utility.yul\":10295:10322   */\n      swap1\n      pop\n        /* \"#utility.yul\":10285:10328   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10334:10641   */\n    tag_176:\n        /* \"#utility.yul\":10402:10403   */\n      0x00\n        /* \"#utility.yul\":10412:10525   */\n    tag_261:\n        /* \"#utility.yul\":10426:10432   */\n      dup4\n        /* \"#utility.yul\":10423:10424   */\n      dup2\n        /* \"#utility.yul\":10420:10433   */\n      lt\n        /* \"#utility.yul\":10412:10525   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":10511:10512   */\n      dup1\n        /* \"#utility.yul\":10506:10509   */\n      dup3\n        /* \"#utility.yul\":10502:10513   */\n      add\n        /* \"#utility.yul\":10496:10514   */\n      mload\n        /* \"#utility.yul\":10492:10493   */\n      dup2\n        /* \"#utility.yul\":10487:10490   */\n      dup5\n        /* \"#utility.yul\":10483:10494   */\n      add\n        /* \"#utility.yul\":10476:10515   */\n      mstore\n        /* \"#utility.yul\":10448:10450   */\n      0x20\n        /* \"#utility.yul\":10445:10446   */\n      dup2\n        /* \"#utility.yul\":10441:10451   */\n      add\n        /* \"#utility.yul\":10436:10451   */\n      swap1\n      pop\n        /* \"#utility.yul\":10412:10525   */\n      jump(tag_261)\n    tag_263:\n        /* \"#utility.yul\":10543:10549   */\n      dup4\n        /* \"#utility.yul\":10540:10541   */\n      dup2\n        /* \"#utility.yul\":10537:10550   */\n      gt\n        /* \"#utility.yul\":10534:10536   */\n      iszero\n      tag_264\n      jumpi\n        /* \"#utility.yul\":10623:10624   */\n      0x00\n        /* \"#utility.yul\":10614:10620   */\n      dup5\n        /* \"#utility.yul\":10609:10612   */\n      dup5\n        /* \"#utility.yul\":10605:10621   */\n      add\n        /* \"#utility.yul\":10598:10625   */\n      mstore\n        /* \"#utility.yul\":10534:10536   */\n    tag_264:\n        /* \"#utility.yul\":10383:10641   */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10647:10967   */\n    tag_65:\n        /* \"#utility.yul\":10691:10697   */\n      0x00\n        /* \"#utility.yul\":10728:10729   */\n      0x02\n        /* \"#utility.yul\":10722:10726   */\n      dup3\n        /* \"#utility.yul\":10718:10730   */\n      div\n        /* \"#utility.yul\":10708:10730   */\n      swap1\n      pop\n        /* \"#utility.yul\":10775:10776   */\n      0x01\n        /* \"#utility.yul\":10769:10773   */\n      dup3\n        /* \"#utility.yul\":10765:10777   */\n      and\n        /* \"#utility.yul\":10796:10814   */\n      dup1\n        /* \"#utility.yul\":10786:10788   */\n      tag_266\n      jumpi\n        /* \"#utility.yul\":10852:10856   */\n      0x7f\n        /* \"#utility.yul\":10844:10850   */\n      dup3\n        /* \"#utility.yul\":10840:10857   */\n      and\n        /* \"#utility.yul\":10830:10857   */\n      swap2\n      pop\n        /* \"#utility.yul\":10786:10788   */\n    tag_266:\n        /* \"#utility.yul\":10914:10916   */\n      0x20\n        /* \"#utility.yul\":10906:10912   */\n      dup3\n        /* \"#utility.yul\":10903:10917   */\n      lt\n        /* \"#utility.yul\":10883:10901   */\n      dup2\n        /* \"#utility.yul\":10880:10918   */\n      eq\n        /* \"#utility.yul\":10877:10879   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":10933:10951   */\n      tag_268\n      tag_269\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":10877:10879   */\n    tag_267:\n        /* \"#utility.yul\":10698:10967   */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10973:11153   */\n    tag_251:\n        /* \"#utility.yul\":11021:11098   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11018:11019   */\n      0x00\n        /* \"#utility.yul\":11011:11099   */\n      mstore\n        /* \"#utility.yul\":11118:11122   */\n      0x11\n        /* \"#utility.yul\":11115:11116   */\n      0x04\n        /* \"#utility.yul\":11108:11123   */\n      mstore\n        /* \"#utility.yul\":11142:11146   */\n      0x24\n        /* \"#utility.yul\":11139:11140   */\n      0x00\n        /* \"#utility.yul\":11132:11147   */\n      revert\n        /* \"#utility.yul\":11159:11339   */\n    tag_269:\n        /* \"#utility.yul\":11207:11284   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11204:11205   */\n      0x00\n        /* \"#utility.yul\":11197:11285   */\n      mstore\n        /* \"#utility.yul\":11304:11308   */\n      0x22\n        /* \"#utility.yul\":11301:11302   */\n      0x04\n        /* \"#utility.yul\":11294:11309   */\n      mstore\n        /* \"#utility.yul\":11328:11332   */\n      0x24\n        /* \"#utility.yul\":11325:11326   */\n      0x00\n        /* \"#utility.yul\":11318:11333   */\n      revert\n        /* \"#utility.yul\":11345:11447   */\n    tag_178:\n        /* \"#utility.yul\":11386:11392   */\n      0x00\n        /* \"#utility.yul\":11437:11439   */\n      0x1f\n        /* \"#utility.yul\":11433:11440   */\n      not\n        /* \"#utility.yul\":11428:11430   */\n      0x1f\n        /* \"#utility.yul\":11421:11426   */\n      dup4\n        /* \"#utility.yul\":11417:11431   */\n      add\n        /* \"#utility.yul\":11413:11441   */\n      and\n        /* \"#utility.yul\":11403:11441   */\n      swap1\n      pop\n        /* \"#utility.yul\":11393:11447   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11453:11675   */\n    tag_183:\n        /* \"#utility.yul\":11593:11627   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":11589:11590   */\n      0x00\n        /* \"#utility.yul\":11581:11587   */\n      dup3\n        /* \"#utility.yul\":11577:11591   */\n      add\n        /* \"#utility.yul\":11570:11628   */\n      mstore\n        /* \"#utility.yul\":11662:11667   */\n      0x6573730000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11657:11659   */\n      0x20\n        /* \"#utility.yul\":11649:11655   */\n      dup3\n        /* \"#utility.yul\":11645:11660   */\n      add\n        /* \"#utility.yul\":11638:11668   */\n      mstore\n        /* \"#utility.yul\":11559:11675   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11681:11902   */\n    tag_188:\n        /* \"#utility.yul\":11821:11855   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":11817:11818   */\n      0x00\n        /* \"#utility.yul\":11809:11815   */\n      dup3\n        /* \"#utility.yul\":11805:11819   */\n      add\n        /* \"#utility.yul\":11798:11856   */\n      mstore\n        /* \"#utility.yul\":11890:11894   */\n      0x7373000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11885:11887   */\n      0x20\n        /* \"#utility.yul\":11877:11883   */\n      dup3\n        /* \"#utility.yul\":11873:11888   */\n      add\n        /* \"#utility.yul\":11866:11895   */\n      mstore\n        /* \"#utility.yul\":11787:11902   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11908:12087   */\n    tag_193:\n        /* \"#utility.yul\":12048:12079   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":12044:12045   */\n      0x00\n        /* \"#utility.yul\":12036:12042   */\n      dup3\n        /* \"#utility.yul\":12032:12046   */\n      add\n        /* \"#utility.yul\":12025:12080   */\n      mstore\n        /* \"#utility.yul\":12014:12087   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12093:12318   */\n    tag_198:\n        /* \"#utility.yul\":12233:12267   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":12229:12230   */\n      0x00\n        /* \"#utility.yul\":12221:12227   */\n      dup3\n        /* \"#utility.yul\":12217:12231   */\n      add\n        /* \"#utility.yul\":12210:12268   */\n      mstore\n        /* \"#utility.yul\":12302:12310   */\n      0x616c616e63650000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12297:12299   */\n      0x20\n        /* \"#utility.yul\":12289:12295   */\n      dup3\n        /* \"#utility.yul\":12285:12300   */\n      add\n        /* \"#utility.yul\":12278:12311   */\n      mstore\n        /* \"#utility.yul\":12199:12318   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12324:12548   */\n    tag_203:\n        /* \"#utility.yul\":12464:12498   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":12460:12461   */\n      0x00\n        /* \"#utility.yul\":12452:12458   */\n      dup3\n        /* \"#utility.yul\":12448:12462   */\n      add\n        /* \"#utility.yul\":12441:12499   */\n      mstore\n        /* \"#utility.yul\":12533:12540   */\n      0x6472657373000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12528:12530   */\n      0x20\n        /* \"#utility.yul\":12520:12526   */\n      dup3\n        /* \"#utility.yul\":12516:12531   */\n      add\n        /* \"#utility.yul\":12509:12541   */\n      mstore\n        /* \"#utility.yul\":12430:12548   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12554:12777   */\n    tag_208:\n        /* \"#utility.yul\":12694:12728   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":12690:12691   */\n      0x00\n        /* \"#utility.yul\":12682:12688   */\n      dup3\n        /* \"#utility.yul\":12678:12692   */\n      add\n        /* \"#utility.yul\":12671:12729   */\n      mstore\n        /* \"#utility.yul\":12763:12769   */\n      0x7265737300000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12758:12760   */\n      0x20\n        /* \"#utility.yul\":12750:12756   */\n      dup3\n        /* \"#utility.yul\":12746:12761   */\n      add\n        /* \"#utility.yul\":12739:12770   */\n      mstore\n        /* \"#utility.yul\":12660:12777   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12783:13007   */\n    tag_213:\n        /* \"#utility.yul\":12923:12957   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":12919:12920   */\n      0x00\n        /* \"#utility.yul\":12911:12917   */\n      dup3\n        /* \"#utility.yul\":12907:12921   */\n      add\n        /* \"#utility.yul\":12900:12958   */\n      mstore\n        /* \"#utility.yul\":12992:12999   */\n      0x207a65726f000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12987:12989   */\n      0x20\n        /* \"#utility.yul\":12979:12985   */\n      dup3\n        /* \"#utility.yul\":12975:12990   */\n      add\n        /* \"#utility.yul\":12968:13000   */\n      mstore\n        /* \"#utility.yul\":12889:13007   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13013:13135   */\n    tag_144:\n        /* \"#utility.yul\":13086:13110   */\n      tag_281\n        /* \"#utility.yul\":13104:13109   */\n      dup2\n        /* \"#utility.yul\":13086:13110   */\n      tag_252\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":13079:13084   */\n      dup2\n        /* \"#utility.yul\":13076:13111   */\n      eq\n        /* \"#utility.yul\":13066:13068   */\n      tag_282\n      jumpi\n        /* \"#utility.yul\":13125:13126   */\n      0x00\n        /* \"#utility.yul\":13122:13123   */\n      dup1\n        /* \"#utility.yul\":13115:13127   */\n      revert\n        /* \"#utility.yul\":13066:13068   */\n    tag_282:\n        /* \"#utility.yul\":13056:13135   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13141:13263   */\n    tag_148:\n        /* \"#utility.yul\":13214:13238   */\n      tag_284\n        /* \"#utility.yul\":13232:13237   */\n      dup2\n        /* \"#utility.yul\":13214:13238   */\n      tag_217\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":13207:13212   */\n      dup2\n        /* \"#utility.yul\":13204:13239   */\n      eq\n        /* \"#utility.yul\":13194:13196   */\n      tag_285\n      jumpi\n        /* \"#utility.yul\":13253:13254   */\n      0x00\n        /* \"#utility.yul\":13250:13251   */\n      dup1\n        /* \"#utility.yul\":13243:13255   */\n      revert\n        /* \"#utility.yul\":13194:13196   */\n    tag_285:\n        /* \"#utility.yul\":13184:13263   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d56ecae39a4876869cfb9893db8e2cc63b360571f7362bca3e8c4b0741ebdebc64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061124e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d14565b60405180910390f35b6100e660048036038101906100e19190610b62565b610308565b6040516100f39190610cf9565b60405180910390f35b61010461032b565b6040516101119190610e16565b60405180910390f35b610134600480360381019061012f9190610b13565b610335565b6040516101419190610cf9565b60405180910390f35b610152610364565b60405161015f9190610e31565b60405180910390f35b610182600480360381019061017d9190610b62565b61036d565b60405161018f9190610cf9565b60405180910390f35b6101b260048036038101906101ad9190610aae565b6103a4565b6040516101bf9190610e16565b60405180910390f35b6101d06103ed565b6040516101dd9190610d14565b60405180910390f35b61020060048036038101906101fb9190610b62565b61047f565b60405161020d9190610cf9565b60405180910390f35b610230600480360381019061022b9190610b62565b6104f6565b60405161023d9190610cf9565b60405180910390f35b610260600480360381019061025b9190610ad7565b610519565b60405161026d9190610e16565b60405180910390f35b60606036805461028590610f46565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f46565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610773565b6103588585856107ff565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610e68565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610f46565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610f46565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610df6565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107ff565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610dd6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90610d56565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107669190610e16565b60405180910390a3505050565b600061077f8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f957818110156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290610d76565b60405180910390fd5b6107f884848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086690610db6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690610d36565b60405180910390fd5b6108ea838383610a7a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096890610d96565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a619190610e16565b60405180910390a3610a74848484610a7f565b50505050565b505050565b505050565b600081359050610a93816111ea565b92915050565b600081359050610aa881611201565b92915050565b600060208284031215610ac057600080fd5b6000610ace84828501610a84565b91505092915050565b60008060408385031215610aea57600080fd5b6000610af885828601610a84565b9250506020610b0985828601610a84565b9150509250929050565b600080600060608486031215610b2857600080fd5b6000610b3686828701610a84565b9350506020610b4786828701610a84565b9250506040610b5886828701610a99565b9150509250925092565b60008060408385031215610b7557600080fd5b6000610b8385828601610a84565b9250506020610b9485828601610a99565b9150509250929050565b610ba781610ed0565b82525050565b6000610bb882610e4c565b610bc28185610e57565b9350610bd2818560208601610f13565b610bdb81610fd6565b840191505092915050565b6000610bf3602383610e57565b9150610bfe82610fe7565b604082019050919050565b6000610c16602283610e57565b9150610c2182611036565b604082019050919050565b6000610c39601d83610e57565b9150610c4482611085565b602082019050919050565b6000610c5c602683610e57565b9150610c67826110ae565b604082019050919050565b6000610c7f602583610e57565b9150610c8a826110fd565b604082019050919050565b6000610ca2602483610e57565b9150610cad8261114c565b604082019050919050565b6000610cc5602583610e57565b9150610cd08261119b565b604082019050919050565b610ce481610efc565b82525050565b610cf381610f06565b82525050565b6000602082019050610d0e6000830184610b9e565b92915050565b60006020820190508181036000830152610d2e8184610bad565b905092915050565b60006020820190508181036000830152610d4f81610be6565b9050919050565b60006020820190508181036000830152610d6f81610c09565b9050919050565b60006020820190508181036000830152610d8f81610c2c565b9050919050565b60006020820190508181036000830152610daf81610c4f565b9050919050565b60006020820190508181036000830152610dcf81610c72565b9050919050565b60006020820190508181036000830152610def81610c95565b9050919050565b60006020820190508181036000830152610e0f81610cb8565b9050919050565b6000602082019050610e2b6000830184610cdb565b92915050565b6000602082019050610e466000830184610cea565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e7382610efc565b9150610e7e83610efc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb357610eb2610f78565b5b828201905092915050565b6000610ec982610edc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f31578082015181840152602081019050610f16565b83811115610f40576000848401525b50505050565b60006002820490506001821680610f5e57607f821691505b60208210811415610f7257610f71610fa7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6111f381610ebe565b81146111fe57600080fd5b50565b61120a81610efc565b811461121557600080fd5b5056fea2646970667358221220d56ecae39a4876869cfb9893db8e2cc63b360571f7362bca3e8c4b0741ebdebc64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x124E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60F SWAP1 PUSH2 0xDD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67F SWAP1 PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77F DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F9 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x866 SWAP1 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP1 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EA DUP4 DUP4 DUP4 PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP1 PUSH2 0xD96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA61 SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA74 DUP5 DUP5 DUP5 PUSH2 0xA7F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA93 DUP2 PUSH2 0x11EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAA8 DUP2 PUSH2 0x1201 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xACE DUP5 DUP3 DUP6 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAF8 DUP6 DUP3 DUP7 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB09 DUP6 DUP3 DUP7 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB36 DUP7 DUP3 DUP8 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB47 DUP7 DUP3 DUP8 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB58 DUP7 DUP3 DUP8 ADD PUSH2 0xA99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP6 DUP3 DUP7 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB94 DUP6 DUP3 DUP7 ADD PUSH2 0xA99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA7 DUP2 PUSH2 0xED0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB8 DUP3 PUSH2 0xE4C JUMP JUMPDEST PUSH2 0xBC2 DUP2 DUP6 PUSH2 0xE57 JUMP JUMPDEST SWAP4 POP PUSH2 0xBD2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xF13 JUMP JUMPDEST PUSH2 0xBDB DUP2 PUSH2 0xFD6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF3 PUSH1 0x23 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xBFE DUP3 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC16 PUSH1 0x22 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC21 DUP3 PUSH2 0x1036 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC39 PUSH1 0x1D DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC44 DUP3 PUSH2 0x1085 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC5C PUSH1 0x26 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC67 DUP3 PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC7F PUSH1 0x25 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC8A DUP3 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA2 PUSH1 0x24 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xCAD DUP3 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCC5 PUSH1 0x25 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xCD0 DUP3 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE4 DUP2 PUSH2 0xEFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCF3 DUP2 PUSH2 0xF06 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD0E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD2E DUP2 DUP5 PUSH2 0xBAD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD4F DUP2 PUSH2 0xBE6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD6F DUP2 PUSH2 0xC09 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD8F DUP2 PUSH2 0xC2C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDAF DUP2 PUSH2 0xC4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDCF DUP2 PUSH2 0xC72 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDEF DUP2 PUSH2 0xC95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE0F DUP2 PUSH2 0xCB8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE2B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCDB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE46 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCEA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE73 DUP3 PUSH2 0xEFC JUMP JUMPDEST SWAP2 POP PUSH2 0xE7E DUP4 PUSH2 0xEFC JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xEB3 JUMPI PUSH2 0xEB2 PUSH2 0xF78 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC9 DUP3 PUSH2 0xEDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF31 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF16 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF40 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF5E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xF72 JUMPI PUSH2 0xF71 PUSH2 0xFA7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x11F3 DUP2 PUSH2 0xEBE JUMP JUMPDEST DUP2 EQ PUSH2 0x11FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x120A DUP2 PUSH2 0xEFC JUMP JUMPDEST DUP2 EQ PUSH2 0x1215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 PUSH15 0xCAE39A4876869CFB9893DB8E2CC63B CALLDATASIZE SDIV PUSH18 0xF7362BCA3E8C4B0741EBDEBC64736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "1611:11861:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13266:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:7"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:7",
														"type": ""
													}
												],
												"src": "7:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "204:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "214:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "236:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "223:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "214:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "279:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "252:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "252:33:7"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "182:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "190:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "198:5:7",
														"type": ""
													}
												],
												"src": "152:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "363:196:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "409:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "418:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "421:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "411:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "411:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "411:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "384:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "393:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "380:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "380:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "405:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "376:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "376:32:7"
															},
															"nodeType": "YulIf",
															"src": "373:2:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "435:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "450:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "464:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "454:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "479:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "514:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "525:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "510:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "510:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "534:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "489:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "489:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "479:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "333:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "344:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "356:6:7",
														"type": ""
													}
												],
												"src": "297:262:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "648:324:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "694:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "703:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "706:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "696:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "696:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "696:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "669:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "678:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "665:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "665:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "690:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "661:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "661:32:7"
															},
															"nodeType": "YulIf",
															"src": "658:2:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "720:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "735:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "749:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "739:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "764:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "799:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "810:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "795:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "795:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "819:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "774:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "774:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "764:6:7"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "847:118:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "862:16:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "876:2:7",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "866:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "892:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "927:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "938:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "923:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "923:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "947:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "902:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "902:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "892:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "610:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "621:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "633:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "641:6:7",
														"type": ""
													}
												],
												"src": "565:407:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1078:452:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1124:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1133:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1136:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1126:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1126:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1126:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1099:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1108:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1095:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1095:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1120:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1091:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1091:32:7"
															},
															"nodeType": "YulIf",
															"src": "1088:2:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "1150:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1165:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1179:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1169:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1194:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1229:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1240:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1225:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1225:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1249:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1204:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1204:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1194:6:7"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1277:118:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1292:16:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1306:2:7",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1296:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1322:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1357:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1368:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1353:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1353:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1377:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1332:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1332:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1322:6:7"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1405:118:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1420:16:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1434:2:7",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1424:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1450:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1485:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1496:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1481:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1481:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1505:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1460:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1460:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1450:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1032:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1043:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1055:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1063:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1071:6:7",
														"type": ""
													}
												],
												"src": "978:552:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1619:324:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1665:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1674:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1677:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1667:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1667:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1667:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1640:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1649:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1636:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1636:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1661:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1632:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1632:32:7"
															},
															"nodeType": "YulIf",
															"src": "1629:2:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "1691:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1706:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1720:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1710:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1735:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1770:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1781:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1766:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1766:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1790:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1745:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1745:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1735:6:7"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1818:118:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1833:16:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1847:2:7",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1837:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1863:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1898:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1909:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1894:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1894:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1918:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1873:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1873:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1863:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1581:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1592:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1604:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1612:6:7",
														"type": ""
													}
												],
												"src": "1536:407:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2008:50:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2025:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2045:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2030:14:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2030:21:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2018:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2018:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2018:34:7"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1996:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2003:3:7",
														"type": ""
													}
												],
												"src": "1949:109:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2156:272:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2166:53:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2213:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2180:32:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2180:39:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2170:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2228:78:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2294:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2299:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2235:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2235:71:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2228:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2341:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2348:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2337:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2337:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2355:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2360:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2315:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2315:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2315:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2376:46:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2387:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2414:6:7"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2392:21:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2392:29:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2383:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2383:39:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2376:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2137:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2144:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2152:3:7",
														"type": ""
													}
												],
												"src": "2064:364:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2580:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2590:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2656:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2661:2:7",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2597:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2597:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2590:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2762:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																	"nodeType": "YulIdentifier",
																	"src": "2673:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2673:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2673:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2775:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2786:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2791:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2782:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2782:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2775:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2568:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2576:3:7",
														"type": ""
													}
												],
												"src": "2434:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2952:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2962:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3028:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3033:2:7",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2969:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2969:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2962:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3134:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																	"nodeType": "YulIdentifier",
																	"src": "3045:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3045:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3045:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3147:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3158:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3163:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3154:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3154:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3147:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2940:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2948:3:7",
														"type": ""
													}
												],
												"src": "2806:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3324:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3334:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3400:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3405:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3341:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3341:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3334:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3506:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																	"nodeType": "YulIdentifier",
																	"src": "3417:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3417:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3417:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3519:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3530:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3535:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3526:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3526:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3519:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3312:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3320:3:7",
														"type": ""
													}
												],
												"src": "3178:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3696:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3706:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3772:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3777:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3713:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3713:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3706:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3878:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"nodeType": "YulIdentifier",
																	"src": "3789:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3789:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3789:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3891:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3902:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3907:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3898:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3898:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3891:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3684:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3692:3:7",
														"type": ""
													}
												],
												"src": "3550:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4068:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4078:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4144:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4149:2:7",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4085:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4085:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4078:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4250:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																	"nodeType": "YulIdentifier",
																	"src": "4161:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4161:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4161:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4263:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4274:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4279:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4270:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4270:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4263:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4056:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4064:3:7",
														"type": ""
													}
												],
												"src": "3922:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4440:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4450:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4516:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4521:2:7",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4457:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4457:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4450:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4622:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																	"nodeType": "YulIdentifier",
																	"src": "4533:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4533:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4533:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4635:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4646:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4651:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4642:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4642:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4635:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4428:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4436:3:7",
														"type": ""
													}
												],
												"src": "4294:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4812:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4822:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4888:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4893:2:7",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4829:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4829:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4822:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																	"nodeType": "YulIdentifier",
																	"src": "4905:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4905:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4905:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5007:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5018:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5023:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5014:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5014:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5007:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4800:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4808:3:7",
														"type": ""
													}
												],
												"src": "4666:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5103:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5120:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5143:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5125:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5125:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5113:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5113:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5113:37:7"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5091:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5098:3:7",
														"type": ""
													}
												],
												"src": "5038:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5223:51:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5240:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5261:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "5245:15:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5245:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5233:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5233:35:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5233:35:7"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5211:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5218:3:7",
														"type": ""
													}
												],
												"src": "5162:112:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5372:118:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5382:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5394:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5405:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5390:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5390:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5382:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5456:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5469:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5480:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5465:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5465:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5418:37:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5418:65:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5418:65:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5344:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5356:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5367:4:7",
														"type": ""
													}
												],
												"src": "5280:210:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5614:195:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5624:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5636:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5647:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5632:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5624:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5671:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5682:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5667:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5667:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "5690:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5696:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5686:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5686:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5660:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5660:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5716:86:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5788:6:7"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "5797:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5724:63:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5724:78:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5716:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5586:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5598:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5609:4:7",
														"type": ""
													}
												],
												"src": "5496:313:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5986:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5996:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6008:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6019:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6004:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6004:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5996:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6043:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6054:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6039:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6039:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6062:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6068:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6058:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6058:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6032:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6032:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6032:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6088:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6222:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6096:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6096:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6088:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5966:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5981:4:7",
														"type": ""
													}
												],
												"src": "5815:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6411:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6421:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6433:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6444:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6429:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6429:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6421:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6468:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6479:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6464:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6464:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6487:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6493:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6483:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6483:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6457:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6457:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6457:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6513:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6647:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6521:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6521:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6513:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6391:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6406:4:7",
														"type": ""
													}
												],
												"src": "6240:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6836:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6846:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6858:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6869:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6854:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6854:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6846:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6893:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6904:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6889:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6889:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6912:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6918:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6908:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6908:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6882:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6882:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6882:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6938:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7072:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6946:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6946:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6938:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6816:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6831:4:7",
														"type": ""
													}
												],
												"src": "6665:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7261:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7271:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7283:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7294:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7279:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7279:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7271:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7318:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7329:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7314:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7314:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7337:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7343:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7333:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7333:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7307:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7307:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7307:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7363:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7497:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7371:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7371:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7363:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7241:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7256:4:7",
														"type": ""
													}
												],
												"src": "7090:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7686:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7696:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7708:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7719:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7704:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7704:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7696:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7743:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7754:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7739:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7739:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7762:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7768:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7758:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7758:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7732:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7732:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7732:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7788:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7922:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7796:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7796:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7788:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7666:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7681:4:7",
														"type": ""
													}
												],
												"src": "7515:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8111:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8121:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8133:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8144:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8129:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8129:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8121:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8168:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8179:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8164:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8164:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8187:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8193:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8183:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8183:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8157:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8157:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8157:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8213:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8347:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8221:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8221:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8213:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8091:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8106:4:7",
														"type": ""
													}
												],
												"src": "7940:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8536:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8546:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8558:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8569:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8554:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8554:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8546:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8593:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8604:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8589:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8589:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8612:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8618:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8608:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8608:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8582:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8582:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8582:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8638:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8772:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8646:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8646:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8638:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8516:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8531:4:7",
														"type": ""
													}
												],
												"src": "8365:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8888:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8898:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8910:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8921:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8906:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8906:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8898:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8978:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8991:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9002:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8987:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8987:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8934:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8934:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8934:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8860:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8872:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8883:4:7",
														"type": ""
													}
												],
												"src": "8790:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9112:120:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9122:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9134:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9145:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9130:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9130:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9122:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9198:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9211:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9222:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9207:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9207:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9158:39:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9158:67:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9158:67:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9084:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9096:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9107:4:7",
														"type": ""
													}
												],
												"src": "9018:214:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9297:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9308:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9324:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9318:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9318:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "9308:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9280:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9290:6:7",
														"type": ""
													}
												],
												"src": "9238:99:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9439:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9456:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9461:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9449:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9449:19:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9449:19:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9477:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9496:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9501:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9492:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9492:14:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "9477:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9411:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9416:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "9427:11:7",
														"type": ""
													}
												],
												"src": "9343:169:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9562:261:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9572:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9595:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9577:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9577:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "9572:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9606:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9629:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9611:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9611:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "9606:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9769:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9771:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9771:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9771:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9690:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9697:66:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9765:1:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9693:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9693:74:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9687:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9687:81:7"
															},
															"nodeType": "YulIf",
															"src": "9684:2:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9801:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9812:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9815:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9808:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9808:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "9801:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9549:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9552:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "9558:3:7",
														"type": ""
													}
												],
												"src": "9518:305:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9874:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9884:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9913:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "9895:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9895:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9884:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9856:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9866:7:7",
														"type": ""
													}
												],
												"src": "9829:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9973:48:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9983:32:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10008:5:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10001:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10001:13:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9994:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9994:21:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9983:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9955:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9965:7:7",
														"type": ""
													}
												],
												"src": "9931:90:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10072:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10082:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10097:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10104:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10093:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10093:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10082:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10054:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10064:7:7",
														"type": ""
													}
												],
												"src": "10027:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10204:32:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10214:16:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10225:5:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10214:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10186:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10196:7:7",
														"type": ""
													}
												],
												"src": "10159:77:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10285:43:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10295:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10310:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10317:4:7",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10306:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10306:16:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10295:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10267:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10277:7:7",
														"type": ""
													}
												],
												"src": "10242:86:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10383:258:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10393:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10402:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "10397:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10462:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10487:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "10492:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10483:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10483:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "10506:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "10511:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "10502:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10502:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "10496:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10496:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10476:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10476:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10476:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10423:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10426:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10420:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10420:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "10434:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10436:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "10445:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10448:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "10441:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10441:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "10436:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "10416:3:7",
																"statements": []
															},
															"src": "10412:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10559:76:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10609:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "10614:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10605:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10605:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10623:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10598:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10598:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10598:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10540:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10543:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10537:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10537:13:7"
															},
															"nodeType": "YulIf",
															"src": "10534:2:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10365:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "10370:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10375:6:7",
														"type": ""
													}
												],
												"src": "10334:307:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10698:269:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10708:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10722:4:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10728:1:7",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10718:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10718:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "10708:6:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10739:38:7",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10769:4:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10775:1:7",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10765:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10765:12:7"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "10743:18:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10816:51:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10830:27:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "10844:6:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10852:4:7",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "10840:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10840:17:7"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10830:6:7"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10796:18:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10789:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10789:26:7"
															},
															"nodeType": "YulIf",
															"src": "10786:2:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10919:42:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "10933:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10933:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10933:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10883:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10906:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10914:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "10903:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10903:14:7"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "10880:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10880:38:7"
															},
															"nodeType": "YulIf",
															"src": "10877:2:7"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "10682:4:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10691:6:7",
														"type": ""
													}
												],
												"src": "10647:320:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11001:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11018:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11021:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11011:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11011:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11011:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11115:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11118:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11108:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11108:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11108:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11139:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11142:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11132:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11132:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11132:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "10973:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11187:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11204:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11207:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11197:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11197:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11197:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11301:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11304:4:7",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11294:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11294:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11294:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11325:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11328:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11318:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11318:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11318:15:7"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "11159:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11393:54:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11403:38:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11421:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11428:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11417:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11417:14:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11437:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11433:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11433:7:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11413:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11413:28:7"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "11403:6:7"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11376:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "11386:6:7",
														"type": ""
													}
												],
												"src": "11345:102:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11559:116:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11581:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11589:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11577:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11577:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11593:34:7",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11570:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11570:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11570:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11649:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11657:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11645:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11645:15:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11662:5:7",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11638:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11638:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11638:30:7"
														}
													]
												},
												"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11551:6:7",
														"type": ""
													}
												],
												"src": "11453:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11787:115:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11809:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11817:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11805:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11805:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11821:34:7",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11798:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11798:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11798:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11877:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11885:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11873:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11873:15:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11890:4:7",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11866:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11866:29:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11866:29:7"
														}
													]
												},
												"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11779:6:7",
														"type": ""
													}
												],
												"src": "11681:221:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12014:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12036:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12044:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12032:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12032:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12048:31:7",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12025:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12025:55:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12025:55:7"
														}
													]
												},
												"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12006:6:7",
														"type": ""
													}
												],
												"src": "11908:179:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12199:119:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12221:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12229:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12217:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12217:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12233:34:7",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12210:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12210:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12210:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12289:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12297:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12285:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12285:15:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12302:8:7",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12278:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12278:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12278:33:7"
														}
													]
												},
												"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12191:6:7",
														"type": ""
													}
												],
												"src": "12093:225:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12430:118:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12452:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12460:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12448:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12448:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12464:34:7",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12441:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12441:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12441:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12520:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12528:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12516:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12516:15:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12533:7:7",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12509:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12509:32:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12509:32:7"
														}
													]
												},
												"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12422:6:7",
														"type": ""
													}
												],
												"src": "12324:224:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12660:117:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12682:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12690:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12678:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12678:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12694:34:7",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12671:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12671:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12671:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12750:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12758:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12746:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12746:15:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12763:6:7",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12739:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12739:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12739:31:7"
														}
													]
												},
												"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12652:6:7",
														"type": ""
													}
												],
												"src": "12554:223:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12889:118:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12911:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12919:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12907:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12907:14:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12923:34:7",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12900:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12900:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12900:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12979:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12987:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12975:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12975:15:7"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12992:7:7",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12968:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12968:32:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12968:32:7"
														}
													]
												},
												"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12881:6:7",
														"type": ""
													}
												],
												"src": "12783:224:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13056:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13113:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13122:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13125:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13115:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13115:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13115:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13079:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13104:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "13086:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13086:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13076:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13076:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13069:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13069:43:7"
															},
															"nodeType": "YulIf",
															"src": "13066:2:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13049:5:7",
														"type": ""
													}
												],
												"src": "13013:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13184:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13241:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13250:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13253:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13243:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13243:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13243:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13207:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13232:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "13214:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13214:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13204:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13204:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13197:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13197:43:7"
															},
															"nodeType": "YulIf",
															"src": "13194:2:7"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13177:5:7",
														"type": ""
													}
												],
												"src": "13141:122:7"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610d14565b60405180910390f35b6100e660048036038101906100e19190610b62565b610308565b6040516100f39190610cf9565b60405180910390f35b61010461032b565b6040516101119190610e16565b60405180910390f35b610134600480360381019061012f9190610b13565b610335565b6040516101419190610cf9565b60405180910390f35b610152610364565b60405161015f9190610e31565b60405180910390f35b610182600480360381019061017d9190610b62565b61036d565b60405161018f9190610cf9565b60405180910390f35b6101b260048036038101906101ad9190610aae565b6103a4565b6040516101bf9190610e16565b60405180910390f35b6101d06103ed565b6040516101dd9190610d14565b60405180910390f35b61020060048036038101906101fb9190610b62565b61047f565b60405161020d9190610cf9565b60405180910390f35b610230600480360381019061022b9190610b62565b6104f6565b60405161023d9190610cf9565b60405180910390f35b610260600480360381019061025b9190610ad7565b610519565b60405161026d9190610e16565b60405180910390f35b60606036805461028590610f46565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610f46565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610773565b6103588585856107ff565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610e68565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610f46565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610f46565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610df6565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107ff565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610dd6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90610d56565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107669190610e16565b60405180910390a3505050565b600061077f8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f957818110156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290610d76565b60405180910390fd5b6107f884848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086690610db6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690610d36565b60405180910390fd5b6108ea838383610a7a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096890610d96565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a619190610e16565b60405180910390a3610a74848484610a7f565b50505050565b505050565b505050565b600081359050610a93816111ea565b92915050565b600081359050610aa881611201565b92915050565b600060208284031215610ac057600080fd5b6000610ace84828501610a84565b91505092915050565b60008060408385031215610aea57600080fd5b6000610af885828601610a84565b9250506020610b0985828601610a84565b9150509250929050565b600080600060608486031215610b2857600080fd5b6000610b3686828701610a84565b9350506020610b4786828701610a84565b9250506040610b5886828701610a99565b9150509250925092565b60008060408385031215610b7557600080fd5b6000610b8385828601610a84565b9250506020610b9485828601610a99565b9150509250929050565b610ba781610ed0565b82525050565b6000610bb882610e4c565b610bc28185610e57565b9350610bd2818560208601610f13565b610bdb81610fd6565b840191505092915050565b6000610bf3602383610e57565b9150610bfe82610fe7565b604082019050919050565b6000610c16602283610e57565b9150610c2182611036565b604082019050919050565b6000610c39601d83610e57565b9150610c4482611085565b602082019050919050565b6000610c5c602683610e57565b9150610c67826110ae565b604082019050919050565b6000610c7f602583610e57565b9150610c8a826110fd565b604082019050919050565b6000610ca2602483610e57565b9150610cad8261114c565b604082019050919050565b6000610cc5602583610e57565b9150610cd08261119b565b604082019050919050565b610ce481610efc565b82525050565b610cf381610f06565b82525050565b6000602082019050610d0e6000830184610b9e565b92915050565b60006020820190508181036000830152610d2e8184610bad565b905092915050565b60006020820190508181036000830152610d4f81610be6565b9050919050565b60006020820190508181036000830152610d6f81610c09565b9050919050565b60006020820190508181036000830152610d8f81610c2c565b9050919050565b60006020820190508181036000830152610daf81610c4f565b9050919050565b60006020820190508181036000830152610dcf81610c72565b9050919050565b60006020820190508181036000830152610def81610c95565b9050919050565b60006020820190508181036000830152610e0f81610cb8565b9050919050565b6000602082019050610e2b6000830184610cdb565b92915050565b6000602082019050610e466000830184610cea565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e7382610efc565b9150610e7e83610efc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb357610eb2610f78565b5b828201905092915050565b6000610ec982610edc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f31578082015181840152602081019050610f16565b83811115610f40576000848401525b50505050565b60006002820490506001821680610f5e57607f821691505b60208210811415610f7257610f71610fa7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6111f381610ebe565b81146111fe57600080fd5b50565b61120a81610efc565b811461121557600080fd5b5056fea2646970667358221220d56ecae39a4876869cfb9893db8e2cc63b360571f7362bca3e8c4b0741ebdebc64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60F SWAP1 PUSH2 0xDD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67F SWAP1 PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77F DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F9 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x866 SWAP1 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP1 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EA DUP4 DUP4 DUP4 PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP1 PUSH2 0xD96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA61 SWAP2 SWAP1 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA74 DUP5 DUP5 DUP5 PUSH2 0xA7F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA93 DUP2 PUSH2 0x11EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAA8 DUP2 PUSH2 0x1201 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xACE DUP5 DUP3 DUP6 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAF8 DUP6 DUP3 DUP7 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB09 DUP6 DUP3 DUP7 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB36 DUP7 DUP3 DUP8 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB47 DUP7 DUP3 DUP8 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB58 DUP7 DUP3 DUP8 ADD PUSH2 0xA99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP6 DUP3 DUP7 ADD PUSH2 0xA84 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB94 DUP6 DUP3 DUP7 ADD PUSH2 0xA99 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA7 DUP2 PUSH2 0xED0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB8 DUP3 PUSH2 0xE4C JUMP JUMPDEST PUSH2 0xBC2 DUP2 DUP6 PUSH2 0xE57 JUMP JUMPDEST SWAP4 POP PUSH2 0xBD2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xF13 JUMP JUMPDEST PUSH2 0xBDB DUP2 PUSH2 0xFD6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF3 PUSH1 0x23 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xBFE DUP3 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC16 PUSH1 0x22 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC21 DUP3 PUSH2 0x1036 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC39 PUSH1 0x1D DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC44 DUP3 PUSH2 0x1085 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC5C PUSH1 0x26 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC67 DUP3 PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC7F PUSH1 0x25 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xC8A DUP3 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA2 PUSH1 0x24 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xCAD DUP3 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCC5 PUSH1 0x25 DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP2 POP PUSH2 0xCD0 DUP3 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE4 DUP2 PUSH2 0xEFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCF3 DUP2 PUSH2 0xF06 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD0E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD2E DUP2 DUP5 PUSH2 0xBAD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD4F DUP2 PUSH2 0xBE6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD6F DUP2 PUSH2 0xC09 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD8F DUP2 PUSH2 0xC2C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDAF DUP2 PUSH2 0xC4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDCF DUP2 PUSH2 0xC72 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDEF DUP2 PUSH2 0xC95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE0F DUP2 PUSH2 0xCB8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE2B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCDB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE46 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCEA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE73 DUP3 PUSH2 0xEFC JUMP JUMPDEST SWAP2 POP PUSH2 0xE7E DUP4 PUSH2 0xEFC JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xEB3 JUMPI PUSH2 0xEB2 PUSH2 0xF78 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC9 DUP3 PUSH2 0xEDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF31 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF16 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF40 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF5E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xF72 JUMPI PUSH2 0xF71 PUSH2 0xFA7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x11F3 DUP2 PUSH2 0xEBE JUMP JUMPDEST DUP2 EQ PUSH2 0x11FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x120A DUP2 PUSH2 0xEFC JUMP JUMPDEST DUP2 EQ PUSH2 0x1215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 PUSH15 0xCAE39A4876869CFB9893DB8E2CC63B CALLDATASIZE SDIV PUSH18 0xF7362BCA3E8C4B0741EBDEBC64736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "1611:11861:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4781:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3592:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5540:256;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3441:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6191:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3756:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2706:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6912:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4077:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4324:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2495:98;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;4781:197::-;4864:4;4880:13;4896:12;:10;:12::i;:::-;4880:28;;4918:32;4927:5;4934:7;4943:6;4918:8;:32::i;:::-;4967:4;4960:11;;;4781:197;;;;:::o;3592:106::-;3653:7;3679:12;;3672:19;;3592:106;:::o;5540:256::-;5637:4;5653:15;5671:12;:10;:12::i;:::-;5653:30;;5693:38;5709:4;5715:7;5724:6;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;5785:4;5778:11;;;5540:256;;;;;:::o;3441:91::-;3499:5;3523:2;3516:9;;3441:91;:::o;6191:234::-;6279:4;6295:13;6311:12;:10;:12::i;:::-;6295:28;;6333:64;6342:5;6349:7;6386:10;6358:25;6368:5;6375:7;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;:::-;6414:4;6407:11;;;6191:234;;;;:::o;3756:125::-;3830:7;3856:9;:18;3866:7;3856:18;;;;;;;;;;;;;;;;3849:25;;3756:125;;;:::o;2706:102::-;2762:13;2794:7;2787:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2706:102;:::o;6912:427::-;7005:4;7021:13;7037:12;:10;:12::i;:::-;7021:28;;7059:24;7086:25;7096:5;7103:7;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;:::-;7328:4;7321:11;;;;6912:427;;;;:::o;4077:189::-;4156:4;4172:13;4188:12;:10;:12::i;:::-;4172:28;;4210;4220:5;4227:2;4231:6;4210:9;:28::i;:::-;4255:4;4248:11;;;4077:189;;;;:::o;4324:149::-;4413:7;4439:11;:18;4451:5;4439:18;;;;;;;;;;;;;;;:27;4458:7;4439:27;;;;;;;;;;;;;;;;4432:34;;4324:149;;;;:::o;850:96:5:-;903:7;929:10;922:17;;850:96;:::o;10794:340:1:-;10912:1;10895:19;;:5;:19;;;;10887:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10992:1;10973:21;;:7;:21;;;;10965:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11074:6;11044:11;:18;11056:5;11044:18;;;;;;;;;;;;;;;:27;11063:7;11044:27;;;;;;;;;;;;;;;:36;;;;11111:7;11095:32;;11104:5;11095:32;;;11120:6;11095:32;;;;;;:::i;:::-;;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;11601:17;11581:16;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;:::-;11577:243;11415:411;;;;:::o;7793:788::-;7905:1;7889:18;;:4;:18;;;;7881:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7981:1;7967:16;;:2;:16;;;;7959:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8034:38;8055:4;8061:2;8065:6;8034:20;:38::i;:::-;8083:19;8105:9;:15;8115:4;8105:15;;;;;;;;;;;;;;;;8083:37;;8153:6;8138:11;:21;;8130:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8268:6;8254:11;:20;8236:9;:15;8246:4;8236:15;;;;;;;;;;;;;;;:38;;;;8468:6;8451:9;:13;8461:2;8451:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8515:2;8500:26;;8509:4;8500:26;;;8519:6;8500:26;;;;;;:::i;:::-;;;;;;;;8537:37;8557:4;8563:2;8567:6;8537:19;:37::i;:::-;7793:788;;;;:::o;12410:91::-;;;;:::o;13089:90::-;;;;:::o;7:139:7:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:139::-;198:5;236:6;223:20;214:29;;252:33;279:5;252:33;:::i;:::-;204:87;;;;:::o;297:262::-;356:6;405:2;393:9;384:7;380:23;376:32;373:2;;;421:1;418;411:12;373:2;464:1;489:53;534:7;525:6;514:9;510:22;489:53;:::i;:::-;479:63;;435:117;363:196;;;;:::o;565:407::-;633:6;641;690:2;678:9;669:7;665:23;661:32;658:2;;;706:1;703;696:12;658:2;749:1;774:53;819:7;810:6;799:9;795:22;774:53;:::i;:::-;764:63;;720:117;876:2;902:53;947:7;938:6;927:9;923:22;902:53;:::i;:::-;892:63;;847:118;648:324;;;;;:::o;978:552::-;1055:6;1063;1071;1120:2;1108:9;1099:7;1095:23;1091:32;1088:2;;;1136:1;1133;1126:12;1088:2;1179:1;1204:53;1249:7;1240:6;1229:9;1225:22;1204:53;:::i;:::-;1194:63;;1150:117;1306:2;1332:53;1377:7;1368:6;1357:9;1353:22;1332:53;:::i;:::-;1322:63;;1277:118;1434:2;1460:53;1505:7;1496:6;1485:9;1481:22;1460:53;:::i;:::-;1450:63;;1405:118;1078:452;;;;;:::o;1536:407::-;1604:6;1612;1661:2;1649:9;1640:7;1636:23;1632:32;1629:2;;;1677:1;1674;1667:12;1629:2;1720:1;1745:53;1790:7;1781:6;1770:9;1766:22;1745:53;:::i;:::-;1735:63;;1691:117;1847:2;1873:53;1918:7;1909:6;1898:9;1894:22;1873:53;:::i;:::-;1863:63;;1818:118;1619:324;;;;;:::o;1949:109::-;2030:21;2045:5;2030:21;:::i;:::-;2025:3;2018:34;2008:50;;:::o;2064:364::-;2152:3;2180:39;2213:5;2180:39;:::i;:::-;2235:71;2299:6;2294:3;2235:71;:::i;:::-;2228:78;;2315:52;2360:6;2355:3;2348:4;2341:5;2337:16;2315:52;:::i;:::-;2392:29;2414:6;2392:29;:::i;:::-;2387:3;2383:39;2376:46;;2156:272;;;;;:::o;2434:366::-;2576:3;2597:67;2661:2;2656:3;2597:67;:::i;:::-;2590:74;;2673:93;2762:3;2673:93;:::i;:::-;2791:2;2786:3;2782:12;2775:19;;2580:220;;;:::o;2806:366::-;2948:3;2969:67;3033:2;3028:3;2969:67;:::i;:::-;2962:74;;3045:93;3134:3;3045:93;:::i;:::-;3163:2;3158:3;3154:12;3147:19;;2952:220;;;:::o;3178:366::-;3320:3;3341:67;3405:2;3400:3;3341:67;:::i;:::-;3334:74;;3417:93;3506:3;3417:93;:::i;:::-;3535:2;3530:3;3526:12;3519:19;;3324:220;;;:::o;3550:366::-;3692:3;3713:67;3777:2;3772:3;3713:67;:::i;:::-;3706:74;;3789:93;3878:3;3789:93;:::i;:::-;3907:2;3902:3;3898:12;3891:19;;3696:220;;;:::o;3922:366::-;4064:3;4085:67;4149:2;4144:3;4085:67;:::i;:::-;4078:74;;4161:93;4250:3;4161:93;:::i;:::-;4279:2;4274:3;4270:12;4263:19;;4068:220;;;:::o;4294:366::-;4436:3;4457:67;4521:2;4516:3;4457:67;:::i;:::-;4450:74;;4533:93;4622:3;4533:93;:::i;:::-;4651:2;4646:3;4642:12;4635:19;;4440:220;;;:::o;4666:366::-;4808:3;4829:67;4893:2;4888:3;4829:67;:::i;:::-;4822:74;;4905:93;4994:3;4905:93;:::i;:::-;5023:2;5018:3;5014:12;5007:19;;4812:220;;;:::o;5038:118::-;5125:24;5143:5;5125:24;:::i;:::-;5120:3;5113:37;5103:53;;:::o;5162:112::-;5245:22;5261:5;5245:22;:::i;:::-;5240:3;5233:35;5223:51;;:::o;5280:210::-;5367:4;5405:2;5394:9;5390:18;5382:26;;5418:65;5480:1;5469:9;5465:17;5456:6;5418:65;:::i;:::-;5372:118;;;;:::o;5496:313::-;5609:4;5647:2;5636:9;5632:18;5624:26;;5696:9;5690:4;5686:20;5682:1;5671:9;5667:17;5660:47;5724:78;5797:4;5788:6;5724:78;:::i;:::-;5716:86;;5614:195;;;;:::o;5815:419::-;5981:4;6019:2;6008:9;6004:18;5996:26;;6068:9;6062:4;6058:20;6054:1;6043:9;6039:17;6032:47;6096:131;6222:4;6096:131;:::i;:::-;6088:139;;5986:248;;;:::o;6240:419::-;6406:4;6444:2;6433:9;6429:18;6421:26;;6493:9;6487:4;6483:20;6479:1;6468:9;6464:17;6457:47;6521:131;6647:4;6521:131;:::i;:::-;6513:139;;6411:248;;;:::o;6665:419::-;6831:4;6869:2;6858:9;6854:18;6846:26;;6918:9;6912:4;6908:20;6904:1;6893:9;6889:17;6882:47;6946:131;7072:4;6946:131;:::i;:::-;6938:139;;6836:248;;;:::o;7090:419::-;7256:4;7294:2;7283:9;7279:18;7271:26;;7343:9;7337:4;7333:20;7329:1;7318:9;7314:17;7307:47;7371:131;7497:4;7371:131;:::i;:::-;7363:139;;7261:248;;;:::o;7515:419::-;7681:4;7719:2;7708:9;7704:18;7696:26;;7768:9;7762:4;7758:20;7754:1;7743:9;7739:17;7732:47;7796:131;7922:4;7796:131;:::i;:::-;7788:139;;7686:248;;;:::o;7940:419::-;8106:4;8144:2;8133:9;8129:18;8121:26;;8193:9;8187:4;8183:20;8179:1;8168:9;8164:17;8157:47;8221:131;8347:4;8221:131;:::i;:::-;8213:139;;8111:248;;;:::o;8365:419::-;8531:4;8569:2;8558:9;8554:18;8546:26;;8618:9;8612:4;8608:20;8604:1;8593:9;8589:17;8582:47;8646:131;8772:4;8646:131;:::i;:::-;8638:139;;8536:248;;;:::o;8790:222::-;8883:4;8921:2;8910:9;8906:18;8898:26;;8934:71;9002:1;8991:9;8987:17;8978:6;8934:71;:::i;:::-;8888:124;;;;:::o;9018:214::-;9107:4;9145:2;9134:9;9130:18;9122:26;;9158:67;9222:1;9211:9;9207:17;9198:6;9158:67;:::i;:::-;9112:120;;;;:::o;9238:99::-;9290:6;9324:5;9318:12;9308:22;;9297:40;;;:::o;9343:169::-;9427:11;9461:6;9456:3;9449:19;9501:4;9496:3;9492:14;9477:29;;9439:73;;;;:::o;9518:305::-;9558:3;9577:20;9595:1;9577:20;:::i;:::-;9572:25;;9611:20;9629:1;9611:20;:::i;:::-;9606:25;;9765:1;9697:66;9693:74;9690:1;9687:81;9684:2;;;9771:18;;:::i;:::-;9684:2;9815:1;9812;9808:9;9801:16;;9562:261;;;;:::o;9829:96::-;9866:7;9895:24;9913:5;9895:24;:::i;:::-;9884:35;;9874:51;;;:::o;9931:90::-;9965:7;10008:5;10001:13;9994:21;9983:32;;9973:48;;;:::o;10027:126::-;10064:7;10104:42;10097:5;10093:54;10082:65;;10072:81;;;:::o;10159:77::-;10196:7;10225:5;10214:16;;10204:32;;;:::o;10242:86::-;10277:7;10317:4;10310:5;10306:16;10295:27;;10285:43;;;:::o;10334:307::-;10402:1;10412:113;10426:6;10423:1;10420:13;10412:113;;;10511:1;10506:3;10502:11;10496:18;10492:1;10487:3;10483:11;10476:39;10448:2;10445:1;10441:10;10436:15;;10412:113;;;10543:6;10540:1;10537:13;10534:2;;;10623:1;10614:6;10609:3;10605:16;10598:27;10534:2;10383:258;;;;:::o;10647:320::-;10691:6;10728:1;10722:4;10718:12;10708:22;;10775:1;10769:4;10765:12;10796:18;10786:2;;10852:4;10844:6;10840:17;10830:27;;10786:2;10914;10906:6;10903:14;10883:18;10880:38;10877:2;;;10933:18;;:::i;:::-;10877:2;10698:269;;;;:::o;10973:180::-;11021:77;11018:1;11011:88;11118:4;11115:1;11108:15;11142:4;11139:1;11132:15;11159:180;11207:77;11204:1;11197:88;11304:4;11301:1;11294:15;11328:4;11325:1;11318:15;11345:102;11386:6;11437:2;11433:7;11428:2;11421:5;11417:14;11413:28;11403:38;;11393:54;;;:::o;11453:222::-;11593:34;11589:1;11581:6;11577:14;11570:58;11662:5;11657:2;11649:6;11645:15;11638:30;11559:116;:::o;11681:221::-;11821:34;11817:1;11809:6;11805:14;11798:58;11890:4;11885:2;11877:6;11873:15;11866:29;11787:115;:::o;11908:179::-;12048:31;12044:1;12036:6;12032:14;12025:55;12014:73;:::o;12093:225::-;12233:34;12229:1;12221:6;12217:14;12210:58;12302:8;12297:2;12289:6;12285:15;12278:33;12199:119;:::o;12324:224::-;12464:34;12460:1;12452:6;12448:14;12441:58;12533:7;12528:2;12520:6;12516:15;12509:32;12430:118;:::o;12554:223::-;12694:34;12690:1;12682:6;12678:14;12671:58;12763:6;12758:2;12750:6;12746:15;12739:31;12660:117;:::o;12783:224::-;12923:34;12919:1;12911:6;12907:14;12900:58;12992:7;12987:2;12979:6;12975:15;12968:32;12889:118;:::o;13013:122::-;13086:24;13104:5;13086:24;:::i;:::-;13079:5;13076:35;13066:2;;13125:1;13122;13115:12;13066:2;13056:79;:::o;13141:122::-;13214:24;13232:5;13214:24;:::i;:::-;13207:5;13204:35;13194:2;;13253:1;13250;13243:12;13194:2;13184:79;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "937200",
								"executionCost": "975",
								"totalCost": "938175"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1563",
								"decimals()": "432",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1182",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "15",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1611,
									"end": 13472,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d56ecae39a4876869cfb9893db8e2cc63b360571f7362bca3e8c4b0741ebdebc64736f6c63430008040033",
									".code": [
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "95D89B41"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "A457C2D7"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "DD62ED3E"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "6FDDE03"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "95EA7B3"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "18160DDD"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "23B872DD"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "313CE567"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1611,
											"end": 13472,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2549,
											"end": 2562,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2581,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2574,
											"end": 2586,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2593,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4864,
											"end": 4868,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4880,
											"end": 4893,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4896,
											"end": 4908,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4896,
											"end": 4906,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 4896,
											"end": 4908,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4896,
											"end": 4908,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4896,
											"end": 4908,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4880,
											"end": 4908,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4880,
											"end": 4908,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4927,
											"end": 4932,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4934,
											"end": 4941,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4943,
											"end": 4949,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4918,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4967,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4781,
											"end": 4978,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3653,
											"end": 3660,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "PUSH",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3679,
											"end": 3691,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3672,
											"end": 3691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3672,
											"end": 3691,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3592,
											"end": 3698,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5637,
											"end": 5641,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5653,
											"end": 5668,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5671,
											"end": 5683,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 5671,
											"end": 5681,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5671,
											"end": 5683,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5671,
											"end": 5683,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 5671,
											"end": 5683,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5653,
											"end": 5683,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5653,
											"end": 5683,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5709,
											"end": 5713,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5715,
											"end": 5722,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5724,
											"end": 5730,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5693,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5693,
											"end": 5731,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5751,
											"end": 5755,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5757,
											"end": 5759,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5761,
											"end": 5767,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5741,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5785,
											"end": 5789,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5778,
											"end": 5789,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5778,
											"end": 5789,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5778,
											"end": 5789,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5796,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3499,
											"end": 3504,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3523,
											"end": 3525,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 3516,
											"end": 3525,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3516,
											"end": 3525,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3532,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6279,
											"end": 6283,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6295,
											"end": 6308,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6311,
											"end": 6323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 6311,
											"end": 6321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 6311,
											"end": 6323,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6311,
											"end": 6323,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 6311,
											"end": 6323,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6295,
											"end": 6323,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6295,
											"end": 6323,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 6342,
											"end": 6347,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6349,
											"end": 6356,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6386,
											"end": 6396,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6368,
											"end": 6373,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6375,
											"end": 6382,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6358,
											"end": 6383,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6358,
											"end": 6396,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6333,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 6333,
											"end": 6397,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6414,
											"end": 6418,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6407,
											"end": 6418,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6407,
											"end": 6418,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6407,
											"end": 6418,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6425,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3830,
											"end": 3837,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3866,
											"end": 3873,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3874,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3849,
											"end": 3874,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3849,
											"end": 3874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3881,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2762,
											"end": 2775,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2794,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2706,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7005,
											"end": 7009,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7037,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 7037,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 7037,
											"end": 7049,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7037,
											"end": 7049,
											"name": "tag",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 7037,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7021,
											"end": 7049,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7021,
											"end": 7049,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7059,
											"end": 7083,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 7096,
											"end": 7101,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7103,
											"end": 7110,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7086,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 7086,
											"end": 7111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7059,
											"end": 7111,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7129,
											"end": 7145,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7129,
											"end": 7164,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 7121,
											"end": 7206,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 7249,
											"end": 7254,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7256,
											"end": 7263,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7284,
											"end": 7299,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7265,
											"end": 7281,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7265,
											"end": 7299,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7240,
											"end": 7248,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 7240,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7328,
											"end": 7332,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 7321,
											"end": 7332,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7321,
											"end": 7332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7321,
											"end": 7332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7321,
											"end": 7332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6912,
											"end": 7339,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4156,
											"end": 4160,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4172,
											"end": 4185,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4188,
											"end": 4200,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 4188,
											"end": 4198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 4188,
											"end": 4200,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4188,
											"end": 4200,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 4188,
											"end": 4200,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4172,
											"end": 4200,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4172,
											"end": 4200,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 4220,
											"end": 4225,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4227,
											"end": 4229,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4231,
											"end": 4237,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4210,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "tag",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 4210,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4255,
											"end": 4259,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4248,
											"end": 4259,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4248,
											"end": 4259,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4248,
											"end": 4259,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4266,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4413,
											"end": 4420,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4450,
											"name": "PUSH",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4451,
											"end": 4456,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4457,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4458,
											"end": 4465,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4439,
											"end": 4466,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4432,
											"end": 4466,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4432,
											"end": 4466,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4324,
											"end": 4473,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 903,
											"end": 910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 922,
											"end": 939,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 922,
											"end": 939,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 850,
											"end": 946,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10912,
											"end": 10913,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10895,
											"end": 10900,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 10895,
											"end": 10914,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "tag",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10887,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10992,
											"end": 10993,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10973,
											"end": 10980,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 10973,
											"end": 10994,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10965,
											"end": 11033,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11074,
											"end": 11080,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11055,
											"name": "PUSH",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11056,
											"end": 11061,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11044,
											"end": 11062,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11063,
											"end": 11070,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11044,
											"end": 11071,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 11044,
											"end": 11080,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11111,
											"end": 11118,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11104,
											"end": 11109,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11120,
											"end": 11126,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11095,
											"end": 11127,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10794,
											"end": 11134,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11515,
											"end": 11539,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 11552,
											"end": 11557,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11559,
											"end": 11566,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11542,
											"end": 11551,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11515,
											"end": 11567,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11601,
											"end": 11618,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11581,
											"end": 11597,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11581,
											"end": 11618,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11662,
											"end": 11668,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11642,
											"end": 11658,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 11642,
											"end": 11668,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11634,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11753,
											"end": 11758,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11760,
											"end": 11767,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11788,
											"end": 11794,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11769,
											"end": 11785,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11769,
											"end": 11794,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11744,
											"end": 11752,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11744,
											"end": 11795,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 11577,
											"end": 11820,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11415,
											"end": 11826,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7905,
											"end": 7906,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7889,
											"end": 7893,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "tag",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7881,
											"end": 7949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7981,
											"end": 7982,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7967,
											"end": 7969,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 7959,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 8055,
											"end": 8059,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8061,
											"end": 8063,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8065,
											"end": 8071,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8034,
											"end": 8054,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 8034,
											"end": 8072,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8083,
											"end": 8102,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8105,
											"end": 8114,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8115,
											"end": 8119,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8105,
											"end": 8120,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8083,
											"end": 8120,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8083,
											"end": 8120,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8153,
											"end": 8159,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8138,
											"end": 8149,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 8138,
											"end": 8159,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "tag",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 8130,
											"end": 8202,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8268,
											"end": 8274,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8254,
											"end": 8265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8254,
											"end": 8274,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8245,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8246,
											"end": 8250,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8236,
											"end": 8251,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8236,
											"end": 8274,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8468,
											"end": 8474,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8460,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8461,
											"end": 8463,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8464,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8451,
											"end": 8474,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8515,
											"end": 8517,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8509,
											"end": 8513,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8519,
											"end": 8525,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "tag",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8500,
											"end": 8526,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 8557,
											"end": 8561,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8563,
											"end": 8565,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8567,
											"end": 8573,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8556,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "tag",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 8537,
											"end": 8574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 8581,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "tag",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12410,
											"end": 12501,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 13089,
											"end": 13179,
											"name": "tag",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 13089,
											"end": 13179,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13089,
											"end": 13179,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13089,
											"end": 13179,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13089,
											"end": 13179,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13089,
											"end": 13179,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 59,
											"end": 146,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "tag",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 198,
											"end": 203,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 242,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 223,
											"end": 243,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 214,
											"end": 243,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 214,
											"end": 243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 279,
											"end": 284,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 204,
											"end": 291,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 204,
											"end": 291,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 204,
											"end": 291,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 204,
											"end": 291,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 204,
											"end": 291,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 297,
											"end": 559,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 297,
											"end": 559,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 356,
											"end": 362,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 405,
											"end": 407,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 393,
											"end": 402,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 384,
											"end": 391,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 380,
											"end": 403,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 376,
											"end": 408,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 373,
											"end": 375,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 373,
											"end": 375,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 373,
											"end": 375,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 421,
											"end": 422,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 411,
											"end": 423,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 373,
											"end": 375,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 373,
											"end": 375,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 464,
											"end": 465,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 542,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 534,
											"end": 541,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 525,
											"end": 531,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 514,
											"end": 523,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 510,
											"end": 532,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 489,
											"end": 542,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 489,
											"end": 542,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 489,
											"end": 542,
											"name": "tag",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 489,
											"end": 542,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 479,
											"end": 542,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 479,
											"end": 542,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 435,
											"end": 552,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 363,
											"end": 559,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 363,
											"end": 559,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 363,
											"end": 559,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 363,
											"end": 559,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 363,
											"end": 559,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 565,
											"end": 972,
											"name": "tag",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 565,
											"end": 972,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 633,
											"end": 639,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 641,
											"end": 647,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 690,
											"end": 692,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 678,
											"end": 687,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 669,
											"end": 676,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 665,
											"end": 688,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 661,
											"end": 693,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 658,
											"end": 660,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 658,
											"end": 660,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 658,
											"end": 660,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 706,
											"end": 707,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 704,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 696,
											"end": 708,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 658,
											"end": 660,
											"name": "tag",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 658,
											"end": 660,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 749,
											"end": 750,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 774,
											"end": 827,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 819,
											"end": 826,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 810,
											"end": 816,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 799,
											"end": 808,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 795,
											"end": 817,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 774,
											"end": 827,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 774,
											"end": 827,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 774,
											"end": 827,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 774,
											"end": 827,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 764,
											"end": 827,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 764,
											"end": 827,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 720,
											"end": 837,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 876,
											"end": 878,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 947,
											"end": 954,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 938,
											"end": 944,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 927,
											"end": 936,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 923,
											"end": 945,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 902,
											"end": 955,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 955,
											"name": "tag",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 902,
											"end": 955,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 892,
											"end": 955,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 892,
											"end": 955,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 847,
											"end": 965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 648,
											"end": 972,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 648,
											"end": 972,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 648,
											"end": 972,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 648,
											"end": 972,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 648,
											"end": 972,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 648,
											"end": 972,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 978,
											"end": 1530,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 978,
											"end": 1530,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1055,
											"end": 1061,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1063,
											"end": 1069,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1071,
											"end": 1077,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1108,
											"end": 1117,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1095,
											"end": 1118,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1091,
											"end": 1123,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1088,
											"end": 1090,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1088,
											"end": 1090,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 1088,
											"end": 1090,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1136,
											"end": 1137,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1133,
											"end": 1134,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1126,
											"end": 1138,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1088,
											"end": 1090,
											"name": "tag",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 1088,
											"end": 1090,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1179,
											"end": 1180,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1204,
											"end": 1257,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 1249,
											"end": 1256,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1246,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1229,
											"end": 1238,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1225,
											"end": 1247,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1204,
											"end": 1257,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 1204,
											"end": 1257,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1204,
											"end": 1257,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 1204,
											"end": 1257,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1194,
											"end": 1257,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1194,
											"end": 1257,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1150,
											"end": 1267,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1306,
											"end": 1308,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1332,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 1377,
											"end": 1384,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1368,
											"end": 1374,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1357,
											"end": 1366,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1353,
											"end": 1375,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1332,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 1332,
											"end": 1385,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1332,
											"end": 1385,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 1332,
											"end": 1385,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1322,
											"end": 1385,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1322,
											"end": 1385,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1277,
											"end": 1395,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1436,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1460,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 1505,
											"end": 1512,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1496,
											"end": 1502,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1485,
											"end": 1494,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1481,
											"end": 1503,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1460,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 1460,
											"end": 1513,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1460,
											"end": 1513,
											"name": "tag",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 1460,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1450,
											"end": 1513,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1450,
											"end": 1513,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1405,
											"end": 1523,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1530,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1530,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1530,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1530,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1530,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1530,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1536,
											"end": 1943,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1536,
											"end": 1943,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1604,
											"end": 1610,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1612,
											"end": 1618,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1661,
											"end": 1663,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1649,
											"end": 1658,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1640,
											"end": 1647,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1636,
											"end": 1659,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1632,
											"end": 1664,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1629,
											"end": 1631,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1629,
											"end": 1631,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 1629,
											"end": 1631,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1677,
											"end": 1678,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1674,
											"end": 1675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1667,
											"end": 1679,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1629,
											"end": 1631,
											"name": "tag",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 1629,
											"end": 1631,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 1790,
											"end": 1797,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1781,
											"end": 1787,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1766,
											"end": 1788,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1798,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1798,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1691,
											"end": 1808,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1847,
											"end": 1849,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1873,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 1918,
											"end": 1925,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1915,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1898,
											"end": 1907,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1873,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 1873,
											"end": 1926,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1873,
											"end": 1926,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 1873,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1863,
											"end": 1926,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1863,
											"end": 1926,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1818,
											"end": 1936,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1943,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1943,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1943,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1943,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1943,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1943,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2058,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 1949,
											"end": 2058,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2030,
											"end": 2051,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "167"
										},
										{
											"begin": 2045,
											"end": 2050,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2030,
											"end": 2051,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 2030,
											"end": 2051,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2051,
											"name": "tag",
											"source": 7,
											"value": "167"
										},
										{
											"begin": 2030,
											"end": 2051,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2025,
											"end": 2028,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2018,
											"end": 2052,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2008,
											"end": 2058,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2008,
											"end": 2058,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2008,
											"end": 2058,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2064,
											"end": 2428,
											"name": "tag",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 2064,
											"end": 2428,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2155,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2180,
											"end": 2219,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 2213,
											"end": 2218,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2180,
											"end": 2219,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 2180,
											"end": 2219,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2180,
											"end": 2219,
											"name": "tag",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 2180,
											"end": 2219,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2235,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 2299,
											"end": 2305,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2294,
											"end": 2297,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2235,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 2235,
											"end": 2306,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2306,
											"name": "tag",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 2235,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2228,
											"end": 2306,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2228,
											"end": 2306,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2315,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 2360,
											"end": 2366,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2355,
											"end": 2358,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2348,
											"end": 2352,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2341,
											"end": 2346,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2337,
											"end": 2353,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2315,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 2315,
											"end": 2367,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2315,
											"end": 2367,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 2315,
											"end": 2367,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2392,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 2414,
											"end": 2420,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2392,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 2392,
											"end": 2421,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2392,
											"end": 2421,
											"name": "tag",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 2392,
											"end": 2421,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 2390,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2383,
											"end": 2422,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2422,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2422,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2428,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2428,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2428,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2428,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2428,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2428,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2434,
											"end": 2800,
											"name": "tag",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 2434,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2576,
											"end": 2579,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2597,
											"end": 2664,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "181"
										},
										{
											"begin": 2661,
											"end": 2663,
											"name": "PUSH",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 2656,
											"end": 2659,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2597,
											"end": 2664,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 2597,
											"end": 2664,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2597,
											"end": 2664,
											"name": "tag",
											"source": 7,
											"value": "181"
										},
										{
											"begin": 2597,
											"end": 2664,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2590,
											"end": 2664,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2590,
											"end": 2664,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2673,
											"end": 2766,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 2762,
											"end": 2765,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2673,
											"end": 2766,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "183"
										},
										{
											"begin": 2673,
											"end": 2766,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2673,
											"end": 2766,
											"name": "tag",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 2673,
											"end": 2766,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2791,
											"end": 2793,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2789,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2782,
											"end": 2794,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2775,
											"end": 2794,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2775,
											"end": 2794,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2800,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2800,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2800,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2800,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2806,
											"end": 3172,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 2806,
											"end": 3172,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2948,
											"end": 2951,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2969,
											"end": 3036,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 3033,
											"end": 3035,
											"name": "PUSH",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 3028,
											"end": 3031,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3036,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 2969,
											"end": 3036,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2969,
											"end": 3036,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 2969,
											"end": 3036,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2962,
											"end": 3036,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2962,
											"end": 3036,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3045,
											"end": 3138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 3134,
											"end": 3137,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3045,
											"end": 3138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 3045,
											"end": 3138,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3045,
											"end": 3138,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 3045,
											"end": 3138,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3163,
											"end": 3165,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3158,
											"end": 3161,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3154,
											"end": 3166,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3147,
											"end": 3166,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2952,
											"end": 3172,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2952,
											"end": 3172,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2952,
											"end": 3172,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2952,
											"end": 3172,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3178,
											"end": 3544,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 3178,
											"end": 3544,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3320,
											"end": 3323,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3341,
											"end": 3408,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 3405,
											"end": 3407,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 3400,
											"end": 3403,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3341,
											"end": 3408,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 3341,
											"end": 3408,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3341,
											"end": 3408,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 3341,
											"end": 3408,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3334,
											"end": 3408,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3334,
											"end": 3408,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3417,
											"end": 3510,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 3506,
											"end": 3509,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3417,
											"end": 3510,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 3417,
											"end": 3510,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3417,
											"end": 3510,
											"name": "tag",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 3417,
											"end": 3510,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3535,
											"end": 3537,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3530,
											"end": 3533,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3526,
											"end": 3538,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3519,
											"end": 3538,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3519,
											"end": 3538,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3324,
											"end": 3544,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3324,
											"end": 3544,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3324,
											"end": 3544,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3324,
											"end": 3544,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3550,
											"end": 3916,
											"name": "tag",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 3550,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3692,
											"end": 3695,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3713,
											"end": 3780,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 3777,
											"end": 3779,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 3772,
											"end": 3775,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3713,
											"end": 3780,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 3713,
											"end": 3780,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3713,
											"end": 3780,
											"name": "tag",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 3713,
											"end": 3780,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3706,
											"end": 3780,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3706,
											"end": 3780,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3789,
											"end": 3882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 3878,
											"end": 3881,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3789,
											"end": 3882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 3789,
											"end": 3882,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3789,
											"end": 3882,
											"name": "tag",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 3789,
											"end": 3882,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3907,
											"end": 3909,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3902,
											"end": 3905,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3898,
											"end": 3910,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3891,
											"end": 3910,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3891,
											"end": 3910,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3696,
											"end": 3916,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3696,
											"end": 3916,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3696,
											"end": 3916,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3696,
											"end": 3916,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3922,
											"end": 4288,
											"name": "tag",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 3922,
											"end": 4288,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4067,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4085,
											"end": 4152,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 4149,
											"end": 4151,
											"name": "PUSH",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 4144,
											"end": 4147,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4085,
											"end": 4152,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 4085,
											"end": 4152,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4085,
											"end": 4152,
											"name": "tag",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 4085,
											"end": 4152,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4078,
											"end": 4152,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4078,
											"end": 4152,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4161,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "202"
										},
										{
											"begin": 4250,
											"end": 4253,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4161,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 4161,
											"end": 4254,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4161,
											"end": 4254,
											"name": "tag",
											"source": 7,
											"value": "202"
										},
										{
											"begin": 4161,
											"end": 4254,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4279,
											"end": 4281,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4274,
											"end": 4277,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4270,
											"end": 4282,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4263,
											"end": 4282,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4263,
											"end": 4282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4288,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4288,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4288,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4068,
											"end": 4288,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4294,
											"end": 4660,
											"name": "tag",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 4294,
											"end": 4660,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4436,
											"end": 4439,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4457,
											"end": 4524,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "206"
										},
										{
											"begin": 4521,
											"end": 4523,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4516,
											"end": 4519,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4457,
											"end": 4524,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 4457,
											"end": 4524,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4457,
											"end": 4524,
											"name": "tag",
											"source": 7,
											"value": "206"
										},
										{
											"begin": 4457,
											"end": 4524,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4450,
											"end": 4524,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4450,
											"end": 4524,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4533,
											"end": 4626,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 4622,
											"end": 4625,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4533,
											"end": 4626,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "208"
										},
										{
											"begin": 4533,
											"end": 4626,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4533,
											"end": 4626,
											"name": "tag",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 4533,
											"end": 4626,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4651,
											"end": 4653,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4646,
											"end": 4649,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4642,
											"end": 4654,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4635,
											"end": 4654,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4635,
											"end": 4654,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4660,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4660,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4660,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4666,
											"end": 5032,
											"name": "tag",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 4666,
											"end": 5032,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4808,
											"end": 4811,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4829,
											"end": 4896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 4893,
											"end": 4895,
											"name": "PUSH",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 4888,
											"end": 4891,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4829,
											"end": 4896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 4829,
											"end": 4896,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4829,
											"end": 4896,
											"name": "tag",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 4829,
											"end": 4896,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4822,
											"end": 4896,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4822,
											"end": 4896,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4905,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 4994,
											"end": 4997,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4905,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 4905,
											"end": 4998,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4905,
											"end": 4998,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 4905,
											"end": 4998,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5023,
											"end": 5025,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5018,
											"end": 5021,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5014,
											"end": 5026,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5007,
											"end": 5026,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5007,
											"end": 5026,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4812,
											"end": 5032,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4812,
											"end": 5032,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4812,
											"end": 5032,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4812,
											"end": 5032,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5038,
											"end": 5156,
											"name": "tag",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 5038,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5125,
											"end": 5149,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 5143,
											"end": 5148,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5125,
											"end": 5149,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 5125,
											"end": 5149,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5125,
											"end": 5149,
											"name": "tag",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 5125,
											"end": 5149,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5120,
											"end": 5123,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5113,
											"end": 5150,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5103,
											"end": 5156,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5103,
											"end": 5156,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5103,
											"end": 5156,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5162,
											"end": 5274,
											"name": "tag",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 5162,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5245,
											"end": 5267,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 5261,
											"end": 5266,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5245,
											"end": 5267,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 5245,
											"end": 5267,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5245,
											"end": 5267,
											"name": "tag",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 5245,
											"end": 5267,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5243,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5233,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5223,
											"end": 5274,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5223,
											"end": 5274,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5223,
											"end": 5274,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5280,
											"end": 5490,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5280,
											"end": 5490,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5405,
											"end": 5407,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5394,
											"end": 5403,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5390,
											"end": 5408,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5382,
											"end": 5408,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5382,
											"end": 5408,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5418,
											"end": 5483,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5480,
											"end": 5481,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5469,
											"end": 5478,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5465,
											"end": 5482,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5456,
											"end": 5462,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5418,
											"end": 5483,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 5418,
											"end": 5483,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5418,
											"end": 5483,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5418,
											"end": 5483,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5490,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5490,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5490,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5490,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5490,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5496,
											"end": 5809,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 5496,
											"end": 5809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5609,
											"end": 5613,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5647,
											"end": 5649,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5636,
											"end": 5645,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5632,
											"end": 5650,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5624,
											"end": 5650,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5624,
											"end": 5650,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5696,
											"end": 5705,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5690,
											"end": 5694,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5706,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5682,
											"end": 5683,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5671,
											"end": 5680,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5667,
											"end": 5684,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5660,
											"end": 5707,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5724,
											"end": 5802,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 5797,
											"end": 5801,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5788,
											"end": 5794,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5724,
											"end": 5802,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 5724,
											"end": 5802,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5724,
											"end": 5802,
											"name": "tag",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 5724,
											"end": 5802,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5716,
											"end": 5802,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5716,
											"end": 5802,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5614,
											"end": 5809,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5614,
											"end": 5809,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5614,
											"end": 5809,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5614,
											"end": 5809,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5614,
											"end": 5809,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5815,
											"end": 6234,
											"name": "tag",
											"source": 7,
											"value": "129"
										},
										{
											"begin": 5815,
											"end": 6234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5981,
											"end": 5985,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6019,
											"end": 6021,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6008,
											"end": 6017,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6004,
											"end": 6022,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5996,
											"end": 6022,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5996,
											"end": 6022,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6068,
											"end": 6077,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6062,
											"end": 6066,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6058,
											"end": 6078,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6054,
											"end": 6055,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6043,
											"end": 6052,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6039,
											"end": 6056,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6032,
											"end": 6079,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6096,
											"end": 6227,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 6222,
											"end": 6226,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6096,
											"end": 6227,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 6096,
											"end": 6227,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6096,
											"end": 6227,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 6096,
											"end": 6227,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6088,
											"end": 6227,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6088,
											"end": 6227,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5986,
											"end": 6234,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5986,
											"end": 6234,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5986,
											"end": 6234,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5986,
											"end": 6234,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6240,
											"end": 6659,
											"name": "tag",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 6240,
											"end": 6659,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6406,
											"end": 6410,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6444,
											"end": 6446,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6433,
											"end": 6442,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6429,
											"end": 6447,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6421,
											"end": 6447,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6421,
											"end": 6447,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6493,
											"end": 6502,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6487,
											"end": 6491,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6479,
											"end": 6480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6468,
											"end": 6477,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6464,
											"end": 6481,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6457,
											"end": 6504,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6521,
											"end": 6652,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 6647,
											"end": 6651,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6521,
											"end": 6652,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 6521,
											"end": 6652,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6521,
											"end": 6652,
											"name": "tag",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 6521,
											"end": 6652,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6513,
											"end": 6652,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6513,
											"end": 6652,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6411,
											"end": 6659,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6411,
											"end": 6659,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6411,
											"end": 6659,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6411,
											"end": 6659,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6665,
											"end": 7084,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 6665,
											"end": 7084,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6831,
											"end": 6835,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6869,
											"end": 6871,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6858,
											"end": 6867,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6846,
											"end": 6872,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6846,
											"end": 6872,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6918,
											"end": 6927,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6912,
											"end": 6916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6908,
											"end": 6928,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6904,
											"end": 6905,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6893,
											"end": 6902,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6889,
											"end": 6906,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6882,
											"end": 6929,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6946,
											"end": 7077,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "231"
										},
										{
											"begin": 7072,
											"end": 7076,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6946,
											"end": 7077,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 6946,
											"end": 7077,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6946,
											"end": 7077,
											"name": "tag",
											"source": 7,
											"value": "231"
										},
										{
											"begin": 6946,
											"end": 7077,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6938,
											"end": 7077,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6938,
											"end": 7077,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6836,
											"end": 7084,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6836,
											"end": 7084,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6836,
											"end": 7084,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6836,
											"end": 7084,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7090,
											"end": 7509,
											"name": "tag",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 7090,
											"end": 7509,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7256,
											"end": 7260,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7294,
											"end": 7296,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7283,
											"end": 7292,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7279,
											"end": 7297,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7271,
											"end": 7297,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7271,
											"end": 7297,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7343,
											"end": 7352,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7337,
											"end": 7341,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7333,
											"end": 7353,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7329,
											"end": 7330,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7318,
											"end": 7327,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7314,
											"end": 7331,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7307,
											"end": 7354,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7371,
											"end": 7502,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "233"
										},
										{
											"begin": 7497,
											"end": 7501,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7371,
											"end": 7502,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 7371,
											"end": 7502,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7371,
											"end": 7502,
											"name": "tag",
											"source": 7,
											"value": "233"
										},
										{
											"begin": 7371,
											"end": 7502,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7363,
											"end": 7502,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7363,
											"end": 7502,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7509,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7509,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7509,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7509,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7515,
											"end": 7934,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 7515,
											"end": 7934,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7681,
											"end": 7685,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7719,
											"end": 7721,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7708,
											"end": 7717,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7704,
											"end": 7722,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7696,
											"end": 7722,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7696,
											"end": 7722,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7768,
											"end": 7777,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7762,
											"end": 7766,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7758,
											"end": 7778,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7754,
											"end": 7755,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7743,
											"end": 7752,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7739,
											"end": 7756,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7732,
											"end": 7779,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7796,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "235"
										},
										{
											"begin": 7922,
											"end": 7926,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7796,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 7796,
											"end": 7927,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7796,
											"end": 7927,
											"name": "tag",
											"source": 7,
											"value": "235"
										},
										{
											"begin": 7796,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7788,
											"end": 7927,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7788,
											"end": 7927,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7686,
											"end": 7934,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7686,
											"end": 7934,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7686,
											"end": 7934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7686,
											"end": 7934,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7940,
											"end": 8359,
											"name": "tag",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 7940,
											"end": 8359,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8106,
											"end": 8110,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8144,
											"end": 8146,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8133,
											"end": 8142,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8129,
											"end": 8147,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8121,
											"end": 8147,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8121,
											"end": 8147,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8193,
											"end": 8202,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8187,
											"end": 8191,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8183,
											"end": 8203,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8179,
											"end": 8180,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8168,
											"end": 8177,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8164,
											"end": 8181,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8157,
											"end": 8204,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8221,
											"end": 8352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "237"
										},
										{
											"begin": 8347,
											"end": 8351,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8221,
											"end": 8352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 8221,
											"end": 8352,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8221,
											"end": 8352,
											"name": "tag",
											"source": 7,
											"value": "237"
										},
										{
											"begin": 8221,
											"end": 8352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8213,
											"end": 8352,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8213,
											"end": 8352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8111,
											"end": 8359,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8111,
											"end": 8359,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8111,
											"end": 8359,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8111,
											"end": 8359,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8365,
											"end": 8784,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 8365,
											"end": 8784,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8531,
											"end": 8535,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8569,
											"end": 8571,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8558,
											"end": 8567,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8554,
											"end": 8572,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8546,
											"end": 8572,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8546,
											"end": 8572,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8618,
											"end": 8627,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8612,
											"end": 8616,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8608,
											"end": 8628,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8604,
											"end": 8605,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8593,
											"end": 8602,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8589,
											"end": 8606,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8582,
											"end": 8629,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8646,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 8772,
											"end": 8776,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8646,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 8646,
											"end": 8777,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8646,
											"end": 8777,
											"name": "tag",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 8646,
											"end": 8777,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8638,
											"end": 8777,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8638,
											"end": 8777,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8784,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8784,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8784,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 8784,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8790,
											"end": 9012,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 8790,
											"end": 9012,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8883,
											"end": 8887,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8921,
											"end": 8923,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8910,
											"end": 8919,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8906,
											"end": 8924,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8898,
											"end": 8924,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8898,
											"end": 8924,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8934,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "241"
										},
										{
											"begin": 9002,
											"end": 9003,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8991,
											"end": 9000,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8987,
											"end": 9004,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8978,
											"end": 8984,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 8934,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 8934,
											"end": 9005,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8934,
											"end": 9005,
											"name": "tag",
											"source": 7,
											"value": "241"
										},
										{
											"begin": 8934,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8888,
											"end": 9012,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8888,
											"end": 9012,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8888,
											"end": 9012,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8888,
											"end": 9012,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8888,
											"end": 9012,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9018,
											"end": 9232,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 9018,
											"end": 9232,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9107,
											"end": 9111,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9145,
											"end": 9147,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9134,
											"end": 9143,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9130,
											"end": 9148,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9122,
											"end": 9148,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9122,
											"end": 9148,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9158,
											"end": 9225,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "243"
										},
										{
											"begin": 9222,
											"end": 9223,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9211,
											"end": 9220,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9207,
											"end": 9224,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9198,
											"end": 9204,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9158,
											"end": 9225,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 9158,
											"end": 9225,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9158,
											"end": 9225,
											"name": "tag",
											"source": 7,
											"value": "243"
										},
										{
											"begin": 9158,
											"end": 9225,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9232,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9232,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9232,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9232,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9232,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9238,
											"end": 9337,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 9238,
											"end": 9337,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9290,
											"end": 9296,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9324,
											"end": 9329,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9318,
											"end": 9330,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9308,
											"end": 9330,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9308,
											"end": 9330,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9297,
											"end": 9337,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9297,
											"end": 9337,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9297,
											"end": 9337,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9297,
											"end": 9337,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9343,
											"end": 9512,
											"name": "tag",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 9343,
											"end": 9512,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9427,
											"end": 9438,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9461,
											"end": 9467,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9456,
											"end": 9459,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9501,
											"end": 9505,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9496,
											"end": 9499,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9492,
											"end": 9506,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9477,
											"end": 9506,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9477,
											"end": 9506,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9512,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9512,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9512,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9512,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9512,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9518,
											"end": 9823,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 9518,
											"end": 9823,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9558,
											"end": 9561,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9577,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 9595,
											"end": 9596,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9577,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 9577,
											"end": 9597,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9577,
											"end": 9597,
											"name": "tag",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 9577,
											"end": 9597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9572,
											"end": 9597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9572,
											"end": 9597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9611,
											"end": 9631,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "248"
										},
										{
											"begin": 9629,
											"end": 9630,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9611,
											"end": 9631,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 9611,
											"end": 9631,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9611,
											"end": 9631,
											"name": "tag",
											"source": 7,
											"value": "248"
										},
										{
											"begin": 9611,
											"end": 9631,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 9631,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 9631,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9765,
											"end": 9766,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9697,
											"end": 9763,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9693,
											"end": 9767,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9690,
											"end": 9691,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9687,
											"end": 9768,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 9684,
											"end": 9686,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 9684,
											"end": 9686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "249"
										},
										{
											"begin": 9684,
											"end": 9686,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9771,
											"end": 9789,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "250"
										},
										{
											"begin": 9771,
											"end": 9789,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "251"
										},
										{
											"begin": 9771,
											"end": 9789,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9771,
											"end": 9789,
											"name": "tag",
											"source": 7,
											"value": "250"
										},
										{
											"begin": 9771,
											"end": 9789,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9684,
											"end": 9686,
											"name": "tag",
											"source": 7,
											"value": "249"
										},
										{
											"begin": 9684,
											"end": 9686,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9815,
											"end": 9816,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9812,
											"end": 9813,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9808,
											"end": 9817,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9801,
											"end": 9817,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9801,
											"end": 9817,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9562,
											"end": 9823,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9562,
											"end": 9823,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9562,
											"end": 9823,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9562,
											"end": 9823,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9562,
											"end": 9823,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9829,
											"end": 9925,
											"name": "tag",
											"source": 7,
											"value": "252"
										},
										{
											"begin": 9829,
											"end": 9925,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9866,
											"end": 9873,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9895,
											"end": 9919,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "254"
										},
										{
											"begin": 9913,
											"end": 9918,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9895,
											"end": 9919,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "255"
										},
										{
											"begin": 9895,
											"end": 9919,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9895,
											"end": 9919,
											"name": "tag",
											"source": 7,
											"value": "254"
										},
										{
											"begin": 9895,
											"end": 9919,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9884,
											"end": 9919,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9884,
											"end": 9919,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9874,
											"end": 9925,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9874,
											"end": 9925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9874,
											"end": 9925,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9874,
											"end": 9925,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9931,
											"end": 10021,
											"name": "tag",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 9931,
											"end": 10021,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9965,
											"end": 9972,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10008,
											"end": 10013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10001,
											"end": 10014,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 9994,
											"end": 10015,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 9983,
											"end": 10015,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9983,
											"end": 10015,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9973,
											"end": 10021,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9973,
											"end": 10021,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9973,
											"end": 10021,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9973,
											"end": 10021,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10027,
											"end": 10153,
											"name": "tag",
											"source": 7,
											"value": "255"
										},
										{
											"begin": 10027,
											"end": 10153,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10064,
											"end": 10071,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10104,
											"end": 10146,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10097,
											"end": 10102,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10093,
											"end": 10147,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10082,
											"end": 10147,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10082,
											"end": 10147,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10072,
											"end": 10153,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10072,
											"end": 10153,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10072,
											"end": 10153,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10072,
											"end": 10153,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10159,
											"end": 10236,
											"name": "tag",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 10159,
											"end": 10236,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10196,
											"end": 10203,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10225,
											"end": 10230,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10214,
											"end": 10230,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10214,
											"end": 10230,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10204,
											"end": 10236,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10204,
											"end": 10236,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10204,
											"end": 10236,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10204,
											"end": 10236,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10242,
											"end": 10328,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 10242,
											"end": 10328,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10277,
											"end": 10284,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10317,
											"end": 10321,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 10310,
											"end": 10315,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10306,
											"end": 10322,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10295,
											"end": 10322,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10295,
											"end": 10322,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10285,
											"end": 10328,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10285,
											"end": 10328,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10285,
											"end": 10328,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10285,
											"end": 10328,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10334,
											"end": 10641,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 10334,
											"end": 10641,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10402,
											"end": 10403,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "tag",
											"source": 7,
											"value": "261"
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10426,
											"end": 10432,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10423,
											"end": 10424,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10420,
											"end": 10433,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10511,
											"end": 10512,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10506,
											"end": 10509,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10502,
											"end": 10513,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10496,
											"end": 10514,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 10492,
											"end": 10493,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10487,
											"end": 10490,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10483,
											"end": 10494,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10476,
											"end": 10515,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10448,
											"end": 10450,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10445,
											"end": 10446,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10441,
											"end": 10451,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10436,
											"end": 10451,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10436,
											"end": 10451,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "261"
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "tag",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 10412,
											"end": 10525,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10543,
											"end": 10549,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10540,
											"end": 10541,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10537,
											"end": 10550,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 10534,
											"end": 10536,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10534,
											"end": 10536,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 10534,
											"end": 10536,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10623,
											"end": 10624,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10614,
											"end": 10620,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10609,
											"end": 10612,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10605,
											"end": 10621,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10598,
											"end": 10625,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10534,
											"end": 10536,
											"name": "tag",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 10534,
											"end": 10536,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10383,
											"end": 10641,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10383,
											"end": 10641,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10383,
											"end": 10641,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10383,
											"end": 10641,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10383,
											"end": 10641,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10647,
											"end": 10967,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 10647,
											"end": 10967,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10691,
											"end": 10697,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10728,
											"end": 10729,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 10722,
											"end": 10726,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10718,
											"end": 10730,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 10708,
											"end": 10730,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10708,
											"end": 10730,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10775,
											"end": 10776,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 10769,
											"end": 10773,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10765,
											"end": 10777,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10796,
											"end": 10814,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10786,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 10786,
											"end": 10788,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10852,
											"end": 10856,
											"name": "PUSH",
											"source": 7,
											"value": "7F"
										},
										{
											"begin": 10844,
											"end": 10850,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10840,
											"end": 10857,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10830,
											"end": 10857,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10830,
											"end": 10857,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10786,
											"end": 10788,
											"name": "tag",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 10786,
											"end": 10788,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10914,
											"end": 10916,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10906,
											"end": 10912,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10903,
											"end": 10917,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10883,
											"end": 10901,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10880,
											"end": 10918,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 10877,
											"end": 10879,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10877,
											"end": 10879,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 10877,
											"end": 10879,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "tag",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10877,
											"end": 10879,
											"name": "tag",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 10877,
											"end": 10879,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10698,
											"end": 10967,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10698,
											"end": 10967,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10698,
											"end": 10967,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10698,
											"end": 10967,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10698,
											"end": 10967,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10973,
											"end": 11153,
											"name": "tag",
											"source": 7,
											"value": "251"
										},
										{
											"begin": 10973,
											"end": 11153,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11021,
											"end": 11098,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11018,
											"end": 11019,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11011,
											"end": 11099,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11118,
											"end": 11122,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 11115,
											"end": 11116,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11108,
											"end": 11123,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11142,
											"end": 11146,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 11139,
											"end": 11140,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11132,
											"end": 11147,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 11159,
											"end": 11339,
											"name": "tag",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 11159,
											"end": 11339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11207,
											"end": 11284,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11204,
											"end": 11205,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11197,
											"end": 11285,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11304,
											"end": 11308,
											"name": "PUSH",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 11301,
											"end": 11302,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11294,
											"end": 11309,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11328,
											"end": 11332,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 11325,
											"end": 11326,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11318,
											"end": 11333,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 11345,
											"end": 11447,
											"name": "tag",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 11345,
											"end": 11447,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11386,
											"end": 11392,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11437,
											"end": 11439,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 11433,
											"end": 11440,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 11428,
											"end": 11430,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 11421,
											"end": 11426,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11417,
											"end": 11431,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11413,
											"end": 11441,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11403,
											"end": 11441,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11403,
											"end": 11441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11393,
											"end": 11447,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11393,
											"end": 11447,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11393,
											"end": 11447,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11393,
											"end": 11447,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11453,
											"end": 11675,
											"name": "tag",
											"source": 7,
											"value": "183"
										},
										{
											"begin": 11453,
											"end": 11675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11593,
											"end": 11627,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 11589,
											"end": 11590,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11581,
											"end": 11587,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11577,
											"end": 11591,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11570,
											"end": 11628,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11662,
											"end": 11667,
											"name": "PUSH",
											"source": 7,
											"value": "6573730000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11657,
											"end": 11659,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11649,
											"end": 11655,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11645,
											"end": 11660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11638,
											"end": 11668,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11559,
											"end": 11675,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11559,
											"end": 11675,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11681,
											"end": 11902,
											"name": "tag",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 11681,
											"end": 11902,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11821,
											"end": 11855,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 11817,
											"end": 11818,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11809,
											"end": 11815,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11805,
											"end": 11819,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11798,
											"end": 11856,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11890,
											"end": 11894,
											"name": "PUSH",
											"source": 7,
											"value": "7373000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11885,
											"end": 11887,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11877,
											"end": 11883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11873,
											"end": 11888,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11866,
											"end": 11895,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11787,
											"end": 11902,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11787,
											"end": 11902,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11908,
											"end": 12087,
											"name": "tag",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 11908,
											"end": 12087,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12048,
											"end": 12079,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 12044,
											"end": 12045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12036,
											"end": 12042,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12032,
											"end": 12046,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12025,
											"end": 12080,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12014,
											"end": 12087,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12014,
											"end": 12087,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12093,
											"end": 12318,
											"name": "tag",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 12093,
											"end": 12318,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12233,
											"end": 12267,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 12229,
											"end": 12230,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12221,
											"end": 12227,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12217,
											"end": 12231,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12210,
											"end": 12268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12302,
											"end": 12310,
											"name": "PUSH",
											"source": 7,
											"value": "616C616E63650000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12297,
											"end": 12299,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12289,
											"end": 12295,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12285,
											"end": 12300,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12278,
											"end": 12311,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12199,
											"end": 12318,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12199,
											"end": 12318,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12324,
											"end": 12548,
											"name": "tag",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 12324,
											"end": 12548,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12464,
											"end": 12498,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 12460,
											"end": 12461,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12452,
											"end": 12458,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12448,
											"end": 12462,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12441,
											"end": 12499,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12533,
											"end": 12540,
											"name": "PUSH",
											"source": 7,
											"value": "6472657373000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12528,
											"end": 12530,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12520,
											"end": 12526,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12516,
											"end": 12531,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12509,
											"end": 12541,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12430,
											"end": 12548,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12430,
											"end": 12548,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12554,
											"end": 12777,
											"name": "tag",
											"source": 7,
											"value": "208"
										},
										{
											"begin": 12554,
											"end": 12777,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12694,
											"end": 12728,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 12690,
											"end": 12691,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12682,
											"end": 12688,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12678,
											"end": 12692,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12671,
											"end": 12729,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12763,
											"end": 12769,
											"name": "PUSH",
											"source": 7,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12758,
											"end": 12760,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12750,
											"end": 12756,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12746,
											"end": 12761,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12739,
											"end": 12770,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12660,
											"end": 12777,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12660,
											"end": 12777,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12783,
											"end": 13007,
											"name": "tag",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 12783,
											"end": 13007,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12923,
											"end": 12957,
											"name": "PUSH",
											"source": 7,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 12919,
											"end": 12920,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12911,
											"end": 12917,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12907,
											"end": 12921,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12900,
											"end": 12958,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12992,
											"end": 12999,
											"name": "PUSH",
											"source": 7,
											"value": "207A65726F000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12987,
											"end": 12989,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12979,
											"end": 12985,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12975,
											"end": 12990,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12968,
											"end": 13000,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12889,
											"end": 13007,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12889,
											"end": 13007,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13013,
											"end": 13135,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 13013,
											"end": 13135,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13086,
											"end": 13110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 13104,
											"end": 13109,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13086,
											"end": 13110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "252"
										},
										{
											"begin": 13086,
											"end": 13110,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13086,
											"end": 13110,
											"name": "tag",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 13086,
											"end": 13110,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13079,
											"end": 13084,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13076,
											"end": 13111,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 13066,
											"end": 13068,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 13066,
											"end": 13068,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13125,
											"end": 13126,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13122,
											"end": 13123,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13115,
											"end": 13127,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 13066,
											"end": 13068,
											"name": "tag",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 13066,
											"end": 13068,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13056,
											"end": 13135,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13056,
											"end": 13135,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13141,
											"end": 13263,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 13141,
											"end": 13263,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13214,
											"end": 13238,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 13232,
											"end": 13237,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13214,
											"end": 13238,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 13214,
											"end": 13238,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13214,
											"end": 13238,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 13214,
											"end": 13238,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13207,
											"end": 13212,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13204,
											"end": 13239,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 13194,
											"end": 13196,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 13194,
											"end": 13196,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13253,
											"end": 13254,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13250,
											"end": 13251,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13243,
											"end": 13255,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 13194,
											"end": 13196,
											"name": "tag",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 13194,
											"end": 13196,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13184,
											"end": 13263,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13184,
											"end": 13263,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://372b878d307d3eb3bd2948ad92653191f38fe0752069015a360466f9f64f6d23\",\"dweb:/ipfs/QmaAbXkUaTNWnG2pNJ3qfaM7nRbktzy7qiWbd1fFZbYvpT\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd4479ab5394696218ccc0d473d3c80915e48d89be948b3479aaaa3206d96df71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://881e1b97fafd3ee58b5e2c537af8e0dccccca6c8f4e32d56e3054b86a60d8200\",\"dweb:/ipfs/Qmc7EpSchkcZbiFn4oAP7KcoMfkGNE2NhXimuicJS1FwTV\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x5f83581950887be701a44c250c1c6e38e9d421809a56717dc99d1d216e5bc41a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45516064c5e566f9ca1f854cbf142c37d86ac4a771c3a92aeecbf160ec92133c\",\"dweb:/ipfs/QmR8a8iwevbt8dvpDhpskPSQsfs5kCL8Ztz1pLZLJfHf5Z\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b78242734070278c66466c020a664119cd089b87f19e4113c2dec691429c6f3\",\"dweb:/ipfs/QmU5PCFRbhxkyx1XqANQJGKoshho4zCaVap11T5VjUNYmv\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1208,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 187,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 193,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 195,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 197,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 199,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 779,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x5f83581950887be701a44c250c1c6e38e9d421809a56717dc99d1d216e5bc41a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45516064c5e566f9ca1f854cbf142c37d86ac4a771c3a92aeecbf160ec92133c\",\"dweb:/ipfs/QmR8a8iwevbt8dvpDhpskPSQsfs5kCL8Ztz1pLZLJfHf5Z\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x5f83581950887be701a44c250c1c6e38e9d421809a56717dc99d1d216e5bc41a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45516064c5e566f9ca1f854cbf142c37d86ac4a771c3a92aeecbf160ec92133c\",\"dweb:/ipfs/QmR8a8iwevbt8dvpDhpskPSQsfs5kCL8Ztz1pLZLJfHf5Z\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":194:8487  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":194:8487  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a7090395ba4511c0126bd530df668836c4d2ede4d3a309dcab1ef0abc38dbf3d64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7090395ba4511c0126bd530df668836c4d2ede4d3a309dcab1ef0abc38dbf3d64736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 MULMOD SUB SWAP6 0xBA GASLIMIT GT 0xC0 SLT PUSH12 0xD530DF668836C4D2EDE4D3A3 MULMOD 0xDC 0xAB 0x1E CREATE 0xAB 0xC3 DUP14 0xBF RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "194:8293:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7090395ba4511c0126bd530df668836c4d2ede4d3a309dcab1ef0abc38dbf3d64736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 MULMOD SUB SWAP6 0xBA GASLIMIT GT 0xC0 SLT PUSH12 0xD530DF668836C4D2EDE4D3A3 MULMOD 0xDC 0xAB 0x1E CREATE 0xAB 0xC3 DUP14 0xBF RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "194:8293:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8487,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a7090395ba4511c0126bd530df668836c4d2ede4d3a309dcab1ef0abc38dbf3d64736f6c63430008040033",
									".code": [
										{
											"begin": 194,
											"end": 8487,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8487,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b78242734070278c66466c020a664119cd089b87f19e4113c2dec691429c6f3\",\"dweb:/ipfs/QmU5PCFRbhxkyx1XqANQJGKoshho4zCaVap11T5VjUNYmv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://372b878d307d3eb3bd2948ad92653191f38fe0752069015a360466f9f64f6d23\",\"dweb:/ipfs/QmaAbXkUaTNWnG2pNJ3qfaM7nRbktzy7qiWbd1fFZbYvpT\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b78242734070278c66466c020a664119cd089b87f19e4113c2dec691429c6f3\",\"dweb:/ipfs/QmU5PCFRbhxkyx1XqANQJGKoshho4zCaVap11T5VjUNYmv\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1208,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/interfaces/IERC20Plus.sol": {
				"IERC20Plus": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "who",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "beneficiary",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(address,uint256)": "9dc29fac",
							"decimals()": "313ce567",
							"mint(address,uint256)": "40c10f19",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IERC20Plus.sol\":\"IERC20Plus\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://372b878d307d3eb3bd2948ad92653191f38fe0752069015a360466f9f64f6d23\",\"dweb:/ipfs/QmaAbXkUaTNWnG2pNJ3qfaM7nRbktzy7qiWbd1fFZbYvpT\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xd4479ab5394696218ccc0d473d3c80915e48d89be948b3479aaaa3206d96df71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://881e1b97fafd3ee58b5e2c537af8e0dccccca6c8f4e32d56e3054b86a60d8200\",\"dweb:/ipfs/Qmc7EpSchkcZbiFn4oAP7KcoMfkGNE2NhXimuicJS1FwTV\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x5f83581950887be701a44c250c1c6e38e9d421809a56717dc99d1d216e5bc41a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45516064c5e566f9ca1f854cbf142c37d86ac4a771c3a92aeecbf160ec92133c\",\"dweb:/ipfs/QmR8a8iwevbt8dvpDhpskPSQsfs5kCL8Ztz1pLZLJfHf5Z\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b78242734070278c66466c020a664119cd089b87f19e4113c2dec691429c6f3\",\"dweb:/ipfs/QmU5PCFRbhxkyx1XqANQJGKoshho4zCaVap11T5VjUNYmv\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"src/interfaces/IERC20Plus.sol\":{\"keccak256\":\"0xd050d04d880bad3cba873d708b7752d97515efed7d04911394427bb82e35db19\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://55c2f3a400e307c1626268d3d5690fbeeb3f9a023bd6ee7b05790f11e02313ef\",\"dweb:/ipfs/QmZggGf68bHM19LXwZP6MysNkSWpMi46g7Qbao4tLfULnb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol:175:30:\n    |\n175 |     ) internal view returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 6987,
					"file": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol",
					"start": 6975
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol:198:30:\n    |\n198 |     ) internal pure returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 7802,
					"file": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol",
					"start": 7790
				},
				"type": "Warning"
			}
		],
		"sources": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1167
						],
						"Initializable": [
							168
						]
					},
					"id": 169,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 169,
							"sourceUnit": 1168,
							"src": "138:44:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "184:2209:0",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 168,
							"linearizedBaseContracts": [
								168
							],
							"name": "Initializable",
							"nameLocation": "2412:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "2432:109:0",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 6,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2560:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "2546:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 5,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2546:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "2579:91:0",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 9,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2688:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "2675:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 8,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2675:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "2708:90:0",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 14,
									"name": "Initialized",
									"nameLocation": "2809:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2827:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "2821:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 11,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2821:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2820:15:0"
									},
									"src": "2803:33:0"
								},
								{
									"body": {
										"id": 69,
										"nodeType": "Block",
										"src": "3269:483:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3284:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 69,
														"src": "3279:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 17,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3279:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 21,
												"initialValue": {
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3301:14:0",
													"subExpression": {
														"id": 19,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "3302:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3279:36:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 27,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 23,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 18,
																			"src": "3347:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 26,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 24,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 6,
																				"src": "3365:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 25,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3380:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3365:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3347:34:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 28,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3346:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 36,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3387:45:0",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 33,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3426:4:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$168",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$168",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 32,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3418:7:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 31,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3418:7:0",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 34,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3418:13:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 29,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1167,
																						"src": "3388:18:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1167_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 30,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 901,
																					"src": "3388:29:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 35,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3388:44:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 39,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 37,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 6,
																				"src": "3436:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 38,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3452:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3436:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3387:66:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 41,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3386:68:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3346:108:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 43,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3468:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 22,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3325:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3325:201:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "3325:201:0"
											},
											{
												"expression": {
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 46,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "3536:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3551:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3536:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "3536:16:0"
											},
											{
												"condition": {
													"id": 50,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "3566:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 56,
												"nodeType": "IfStatement",
												"src": "3562:65:0",
												"trueBody": {
													"id": 55,
													"nodeType": "Block",
													"src": "3582:45:0",
													"statements": [
														{
															"expression": {
																"id": 53,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 51,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "3596:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 52,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3612:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3596:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 54,
															"nodeType": "ExpressionStatement",
															"src": "3596:20:0"
														}
													]
												}
											},
											{
												"id": 57,
												"nodeType": "PlaceholderStatement",
												"src": "3636:1:0"
											},
											{
												"condition": {
													"id": 58,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "3651:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 68,
												"nodeType": "IfStatement",
												"src": "3647:99:0",
												"trueBody": {
													"id": 67,
													"nodeType": "Block",
													"src": "3667:79:0",
													"statements": [
														{
															"expression": {
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 59,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "3681:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 60,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3697:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3681:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 62,
															"nodeType": "ExpressionStatement",
															"src": "3681:21:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 64,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3733:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 63,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "3721:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 65,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3721:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 66,
															"nodeType": "EmitStatement",
															"src": "3716:19:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "2842:399:0",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 70,
									"name": "initializer",
									"nameLocation": "3255:11:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:2:0"
									},
									"src": "3246:506:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "4863:255:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 81,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4881:14:0",
																"subExpression": {
																	"id": 76,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "4882:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 80,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 78,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "4899:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 79,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 73,
																	"src": "4914:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4899:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4881:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4923:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 75,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4873:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4873:99:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 84,
												"nodeType": "ExpressionStatement",
												"src": "4873:99:0"
											},
											{
												"expression": {
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 85,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "4982:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 86,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 73,
														"src": "4997:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4982:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 88,
												"nodeType": "ExpressionStatement",
												"src": "4982:22:0"
											},
											{
												"expression": {
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 89,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "5014:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 90,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5030:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5014:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 92,
												"nodeType": "ExpressionStatement",
												"src": "5014:20:0"
											},
											{
												"id": 93,
												"nodeType": "PlaceholderStatement",
												"src": "5044:1:0"
											},
											{
												"expression": {
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 94,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "5055:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 95,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5071:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5055:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "5055:21:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 99,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 73,
															"src": "5103:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 98,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "5091:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5091:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "5086:25:0"
											}
										]
									},
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "3758:1062:0",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 103,
									"name": "reinitializer",
									"nameLocation": "4834:13:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4854:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "4848:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 72,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4848:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4847:15:0"
									},
									"src": "4825:293:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 112,
										"nodeType": "Block",
										"src": "5356:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 107,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "5374:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5389:45:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5366:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5366:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "5366:69:0"
											},
											{
												"id": 111,
												"nodeType": "PlaceholderStatement",
												"src": "5445:1:0"
											}
										]
									},
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "5124:199:0",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 113,
									"name": "onlyInitializing",
									"nameLocation": "5337:16:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5353:2:0"
									},
									"src": "5328:125:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 148,
										"nodeType": "Block",
										"src": "5988:231:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "6006:14:0",
															"subExpression": {
																"id": 118,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "6007:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 120,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6022:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 117,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5998:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 122,
												"nodeType": "ExpressionStatement",
												"src": "5998:66:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 123,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "6078:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6099:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 125,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6099:5:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 124,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6094:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6094:11:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 128,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6094:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6078:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 147,
												"nodeType": "IfStatement",
												"src": "6074:139:0",
												"trueBody": {
													"id": 146,
													"nodeType": "Block",
													"src": "6111:102:0",
													"statements": [
														{
															"expression": {
																"id": 136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 130,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "6125:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6145:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 132,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6145:5:0",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 131,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6140:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6140:11:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6140:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6125:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 137,
															"nodeType": "ExpressionStatement",
															"src": "6125:30:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 141,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6191:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 140,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6191:5:0",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 139,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6186:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 142,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6186:11:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 143,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6186:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 138,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "6174:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6174:28:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 145,
															"nodeType": "EmitStatement",
															"src": "6169:33:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "5459:475:0",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5948:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5968:2:0"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5988:0:0"
									},
									"scope": 168,
									"src": "5939:280:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 157,
										"nodeType": "Block",
										"src": "6393:36:0",
										"statements": [
											{
												"expression": {
													"id": 155,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 6,
													"src": "6410:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 154,
												"id": 156,
												"nodeType": "Return",
												"src": "6403:19:0"
											}
										]
									},
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "6225:99:0",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6338:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6360:2:0"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "6386:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 152,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6386:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6385:7:0"
									},
									"scope": 168,
									"src": "6329:100:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "6601:37:0",
										"statements": [
											{
												"expression": {
													"id": 164,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 9,
													"src": "6618:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 163,
												"id": 165,
												"nodeType": "Return",
												"src": "6611:20:0"
											}
										]
									},
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "6435:105:0",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6554:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6569:2:0"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "6595:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 161,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6595:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6594:6:0"
									},
									"scope": 168,
									"src": "6545:93:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 169,
							"src": "2394:4246:0",
							"usedErrors": []
						}
					],
					"src": "113:6528:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1167
						],
						"ContextUpgradeable": [
							1209
						],
						"ERC20Upgradeable": [
							780
						],
						"IERC20MetadataUpgradeable": [
							883
						],
						"IERC20Upgradeable": [
							858
						],
						"Initializable": [
							168
						]
					},
					"id": 781,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 170,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 781,
							"sourceUnit": 859,
							"src": "130:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 172,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 781,
							"sourceUnit": 884,
							"src": "164:52:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 173,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 781,
							"sourceUnit": 1210,
							"src": "217:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 174,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 781,
							"sourceUnit": 169,
							"src": "262:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 176,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 168,
										"src": "1640:13:1"
									},
									"id": 177,
									"nodeType": "InheritanceSpecifier",
									"src": "1640:13:1"
								},
								{
									"baseName": {
										"id": 178,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1209,
										"src": "1655:18:1"
									},
									"id": 179,
									"nodeType": "InheritanceSpecifier",
									"src": "1655:18:1"
								},
								{
									"baseName": {
										"id": 180,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 858,
										"src": "1675:17:1"
									},
									"id": 181,
									"nodeType": "InheritanceSpecifier",
									"src": "1675:17:1"
								},
								{
									"baseName": {
										"id": 182,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 883,
										"src": "1694:25:1"
									},
									"id": 183,
									"nodeType": "InheritanceSpecifier",
									"src": "1694:25:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 175,
								"nodeType": "StructuredDocumentation",
								"src": "309:1301:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 780,
							"linearizedBaseContracts": [
								780,
								883,
								858,
								1209,
								168
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1620:16:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 187,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1762:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 780,
									"src": "1726:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 186,
										"keyType": {
											"id": 184,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1734:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1726:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 185,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1745:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 193,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1834:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 780,
									"src": "1778:67:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 192,
										"keyType": {
											"id": 188,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1786:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1778:47:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 191,
											"keyType": {
												"id": 189,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1805:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1797:27:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 190,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1816:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 195,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1868:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 780,
									"src": "1852:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 194,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1852:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 197,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1902:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 780,
									"src": "1887:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 196,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1887:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 199,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1928:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 780,
									"src": "1913:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 198,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1913:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "2210:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 210,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "2243:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 211,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "2250:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 209,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 233,
														"src": "2220:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2220:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 213,
												"nodeType": "ExpressionStatement",
												"src": "2220:38:1"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "1942:171:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 207,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 206,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "2193:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2193:16:1"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2127:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2154:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2140:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 201,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2140:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2175:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2161:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 203,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2161:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:44:1"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2210:0:1"
									},
									"scope": 780,
									"src": "2118:147:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 232,
										"nodeType": "Block",
										"src": "2373:57:1",
										"statements": [
											{
												"expression": {
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 224,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 197,
														"src": "2383:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 225,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 217,
														"src": "2391:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2383:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 227,
												"nodeType": "ExpressionStatement",
												"src": "2383:13:1"
											},
											{
												"expression": {
													"id": 230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 228,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 199,
														"src": "2406:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 229,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "2416:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2406:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 231,
												"nodeType": "ExpressionStatement",
												"src": "2406:17:1"
											}
										]
									},
									"id": 233,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 222,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 221,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "2356:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2356:16:1"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2280:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2317:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "2303:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 216,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2303:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2338:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "2324:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 218,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2324:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2302:44:1"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2373:0:1"
									},
									"scope": 780,
									"src": "2271:159:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										870
									],
									"body": {
										"id": 242,
										"nodeType": "Block",
										"src": "2564:29:1",
										"statements": [
											{
												"expression": {
													"id": 240,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 197,
													"src": "2581:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 239,
												"id": 241,
												"nodeType": "Return",
												"src": "2574:12:1"
											}
										]
									},
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "2436:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2504:4:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 236,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2531:8:1"
									},
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2508:2:1"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2549:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 237,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2549:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2548:15:1"
									},
									"scope": 780,
									"src": "2495:98:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										876
									],
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "2777:31:1",
										"statements": [
											{
												"expression": {
													"id": 250,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 199,
													"src": "2794:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 249,
												"id": 251,
												"nodeType": "Return",
												"src": "2787:14:1"
											}
										]
									},
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "2599:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2715:6:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 246,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2744:8:1"
									},
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2721:2:1"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "2762:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 247,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2761:15:1"
									},
									"scope": 780,
									"src": "2706:102:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										882
									],
									"body": {
										"id": 262,
										"nodeType": "Block",
										"src": "3506:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3523:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 259,
												"id": 261,
												"nodeType": "Return",
												"src": "3516:9:1"
											}
										]
									},
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "2814:622:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 263,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3450:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 256,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3481:8:1"
									},
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3458:2:1"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "3499:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 257,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3499:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:7:1"
									},
									"scope": 780,
									"src": "3441:91:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										807
									],
									"body": {
										"id": 272,
										"nodeType": "Block",
										"src": "3662:36:1",
										"statements": [
											{
												"expression": {
													"id": 270,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 195,
													"src": "3679:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 269,
												"id": 271,
												"nodeType": "Return",
												"src": "3672:19:1"
											}
										]
									},
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "3538:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 273,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3601:11:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 266,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3635:8:1"
									},
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3612:2:1"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "3653:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3653:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3652:9:1"
									},
									"scope": 780,
									"src": "3592:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										815
									],
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "3839:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 282,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 187,
														"src": "3856:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 284,
													"indexExpression": {
														"id": 283,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "3866:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3856:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 281,
												"id": 285,
												"nodeType": "Return",
												"src": "3849:25:1"
											}
										]
									},
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "3704:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3765:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 278,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3812:8:1"
									},
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3783:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "3775:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3775:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3774:17:1"
									},
									"returnParameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "3830:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3829:9:1"
									},
									"scope": 780,
									"src": "3756:125:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										825
									],
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "4162:104:1",
										"statements": [
											{
												"assignments": [
													299
												],
												"declarations": [
													{
														"constant": false,
														"id": 299,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4180:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 311,
														"src": "4172:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 298,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4172:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 302,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 300,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "4188:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4188:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4172:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 304,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 299,
															"src": "4220:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 305,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 290,
															"src": "4227:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 306,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "4231:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 303,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 535,
														"src": "4210:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4210:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 308,
												"nodeType": "ExpressionStatement",
												"src": "4210:28:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4255:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 297,
												"id": 310,
												"nodeType": "Return",
												"src": "4248:11:1"
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "3887:185:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4086:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 294,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4138:8:1"
									},
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4103:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "4095:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4095:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4115:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "4107:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4107:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4094:28:1"
									},
									"returnParameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "4156:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 295,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4156:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4155:6:1"
									},
									"scope": 780,
									"src": "4077:189:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										835
									],
									"body": {
										"id": 329,
										"nodeType": "Block",
										"src": "4422:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 323,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "4439:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 325,
														"indexExpression": {
															"id": 324,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "4451:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4439:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 327,
													"indexExpression": {
														"id": 326,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "4458:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4439:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 322,
												"id": 328,
												"nodeType": "Return",
												"src": "4432:34:1"
											}
										]
									},
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "4272:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4333:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 319,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4395:8:1"
									},
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4351:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "4343:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4343:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4366:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "4358:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4358:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4342:32:1"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "4413:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:9:1"
									},
									"scope": 780,
									"src": "4324:149:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										845
									],
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "4870:108:1",
										"statements": [
											{
												"assignments": [
													342
												],
												"declarations": [
													{
														"constant": false,
														"id": 342,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4888:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 354,
														"src": "4880:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 341,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4880:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 343,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "4896:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4896:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4880:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "4927:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 348,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 333,
															"src": "4934:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 349,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "4943:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 346,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 709,
														"src": "4918:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4918:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "4918:32:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4967:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 340,
												"id": 353,
												"nodeType": "Return",
												"src": "4960:11:1"
											}
										]
									},
									"documentation": {
										"id": 331,
										"nodeType": "StructuredDocumentation",
										"src": "4479:297:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4790:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 337,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4846:8:1"
									},
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4806:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "4798:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4823:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "4815:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4815:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4797:33:1"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "4864:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 338,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4864:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4863:6:1"
									},
									"scope": 780,
									"src": "4781:197:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										857
									],
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "5643:153:1",
										"statements": [
											{
												"assignments": [
													369
												],
												"declarations": [
													{
														"constant": false,
														"id": 369,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5661:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 387,
														"src": "5653:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 368,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5653:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 372,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 370,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "5671:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5671:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5653:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 374,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "5709:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 375,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "5715:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 376,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "5724:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 373,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "5693:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5693:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 378,
												"nodeType": "ExpressionStatement",
												"src": "5693:38:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 380,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "5751:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 381,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "5757:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 382,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "5761:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 379,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 535,
														"src": "5741:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 384,
												"nodeType": "ExpressionStatement",
												"src": "5741:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5785:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 367,
												"id": 386,
												"nodeType": "Return",
												"src": "5778:11:1"
											}
										]
									},
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "4984:551:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5549:12:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 364,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5619:8:1"
									},
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5570:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "5562:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5562:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5584:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "5576:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5576:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5596:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "5588:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5588:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5561:42:1"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "5637:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 365,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5637:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5636:6:1"
									},
									"scope": 780,
									"src": "5540:256:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 416,
										"nodeType": "Block",
										"src": "6285:140:1",
										"statements": [
											{
												"assignments": [
													399
												],
												"declarations": [
													{
														"constant": false,
														"id": 399,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6303:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 416,
														"src": "6295:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 398,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6295:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 402,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 400,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "6311:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6311:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6295:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 404,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 399,
															"src": "6342:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 405,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "6349:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 407,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 399,
																		"src": "6368:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 408,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 391,
																		"src": "6375:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 406,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 330,
																	"src": "6358:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6358:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 410,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 393,
																"src": "6386:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6358:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 403,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 709,
														"src": "6333:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 413,
												"nodeType": "ExpressionStatement",
												"src": "6333:64:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6414:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 397,
												"id": 415,
												"nodeType": "Return",
												"src": "6407:11:1"
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "5802:384:1",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6200:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6226:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "6218:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 390,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6218:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6243:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "6235:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6235:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6217:37:1"
									},
									"returnParameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "6279:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 395,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6279:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6278:6:1"
									},
									"scope": 780,
									"src": "6191:234:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "7011:328:1",
										"statements": [
											{
												"assignments": [
													428
												],
												"declarations": [
													{
														"constant": false,
														"id": 428,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7029:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 457,
														"src": "7021:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 427,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7021:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 431,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 429,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1194,
														"src": "7037:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7037:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7021:28:1"
											},
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7067:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 457,
														"src": "7059:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7059:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 435,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "7096:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 436,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "7103:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 434,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "7086:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7086:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7059:52:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 440,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 433,
																"src": "7129:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 441,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 422,
																"src": "7149:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7129:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 443,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7166:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 439,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7121:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7121:85:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 445,
												"nodeType": "ExpressionStatement",
												"src": "7121:85:1"
											},
											{
												"id": 454,
												"nodeType": "UncheckedBlock",
												"src": "7216:95:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 447,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 428,
																	"src": "7249:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 448,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 420,
																	"src": "7256:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 449,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 433,
																		"src": "7265:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 450,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 422,
																		"src": "7284:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7265:34:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 446,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 709,
																"src": "7240:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7240:60:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 453,
														"nodeType": "ExpressionStatement",
														"src": "7240:60:1"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7328:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 426,
												"id": 456,
												"nodeType": "Return",
												"src": "7321:11:1"
											}
										]
									},
									"documentation": {
										"id": 418,
										"nodeType": "StructuredDocumentation",
										"src": "6431:476:1",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6921:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6947:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6939:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6939:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6964:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6956:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6956:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6938:42:1"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "7005:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 424,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7005:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7004:6:1"
									},
									"scope": 780,
									"src": "6912:427:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "7871:710:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 469,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 461,
																"src": "7889:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7905:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7897:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 470,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7897:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7897:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7889:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7909:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 468,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7881:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7881:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 477,
												"nodeType": "ExpressionStatement",
												"src": "7881:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 479,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 463,
																"src": "7967:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7981:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 481,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7973:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 480,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7973:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7973:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7967:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7985:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 478,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7959:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7959:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 487,
												"nodeType": "ExpressionStatement",
												"src": "7959:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 489,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "8055:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 490,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "8061:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 491,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "8065:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 488,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "8034:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8034:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "8034:38:1"
											},
											{
												"assignments": [
													495
												],
												"declarations": [
													{
														"constant": false,
														"id": 495,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8091:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 534,
														"src": "8083:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 494,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8083:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 499,
												"initialValue": {
													"baseExpression": {
														"id": 496,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 187,
														"src": "8105:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 498,
													"indexExpression": {
														"id": 497,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "8115:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8105:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8083:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 501,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "8138:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 502,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 465,
																"src": "8153:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8138:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 504,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8161:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 500,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8130:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8130:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 506,
												"nodeType": "ExpressionStatement",
												"src": "8130:72:1"
											},
											{
												"id": 521,
												"nodeType": "UncheckedBlock",
												"src": "8212:273:1",
												"statements": [
													{
														"expression": {
															"id": 513,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 507,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 187,
																	"src": "8236:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 509,
																"indexExpression": {
																	"id": 508,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 461,
																	"src": "8246:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8236:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 512,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 510,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 495,
																	"src": "8254:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 511,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 465,
																	"src": "8268:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8254:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8236:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 514,
														"nodeType": "ExpressionStatement",
														"src": "8236:38:1"
													},
													{
														"expression": {
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 515,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 187,
																	"src": "8451:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 517,
																"indexExpression": {
																	"id": 516,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 463,
																	"src": "8461:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8451:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 518,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 465,
																"src": "8468:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8451:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 520,
														"nodeType": "ExpressionStatement",
														"src": "8451:23:1"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 523,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "8509:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "8515:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 525,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "8519:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "8500:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8500:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "EmitStatement",
												"src": "8495:31:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 529,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "8557:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 530,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "8563:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 531,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "8567:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 528,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "8537:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8537:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 533,
												"nodeType": "ExpressionStatement",
												"src": "8537:37:1"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "7345:443:1",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7802:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7820:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "7812:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7834:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "7826:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 462,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7846:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "7838:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7838:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7811:42:1"
									},
									"returnParameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7871:0:1"
									},
									"scope": 780,
									"src": "7793:788:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 591,
										"nodeType": "Block",
										"src": "8922:470:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 544,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 538,
																"src": "8940:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8959:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8951:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 545,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8951:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8951:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8940:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 550,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8963:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 543,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8932:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8932:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 552,
												"nodeType": "ExpressionStatement",
												"src": "8932:65:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 556,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9037:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9029:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 554,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9029:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9029:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 558,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "9041:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 559,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "9050:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 553,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "9008:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9008:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 561,
												"nodeType": "ExpressionStatement",
												"src": "9008:49:1"
											},
											{
												"expression": {
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 562,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "9068:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 563,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "9084:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9068:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "9068:22:1"
											},
											{
												"id": 572,
												"nodeType": "UncheckedBlock",
												"src": "9100:175:1",
												"statements": [
													{
														"expression": {
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 566,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 187,
																	"src": "9236:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 568,
																"indexExpression": {
																	"id": 567,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 538,
																	"src": "9246:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9236:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 569,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 540,
																"src": "9258:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9236:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 571,
														"nodeType": "ExpressionStatement",
														"src": "9236:28:1"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9306:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 575,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9298:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 574,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9298:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9298:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 578,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "9310:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 579,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "9319:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 573,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "9289:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9289:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 581,
												"nodeType": "EmitStatement",
												"src": "9284:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9365:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 584,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9357:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 583,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9357:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 586,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9357:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 587,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "9369:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 588,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "9378:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 582,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "9337:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9337:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 590,
												"nodeType": "ExpressionStatement",
												"src": "9337:48:1"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "8587:265:1",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 592,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8866:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8880:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "8872:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8872:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8897:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "8889:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8889:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8871:33:1"
									},
									"returnParameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8922:0:1"
									},
									"scope": 780,
									"src": "8857:535:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "9777:594:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 606,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 601,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 595,
																"src": "9795:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9814:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9806:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 602,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9806:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9806:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9795:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9818:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 600,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9787:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9787:67:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 609,
												"nodeType": "ExpressionStatement",
												"src": "9787:67:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 611,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "9886:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 614,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9903:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 613,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9895:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 612,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9895:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 615,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9895:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "9907:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 610,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "9865:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9865:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 618,
												"nodeType": "ExpressionStatement",
												"src": "9865:49:1"
											},
											{
												"assignments": [
													620
												],
												"declarations": [
													{
														"constant": false,
														"id": 620,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9933:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 663,
														"src": "9925:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 619,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9925:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 624,
												"initialValue": {
													"baseExpression": {
														"id": 621,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 187,
														"src": "9950:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 623,
													"indexExpression": {
														"id": 622,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 595,
														"src": "9960:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9950:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9925:43:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 626,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 620,
																"src": "9986:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 627,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "10004:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10012:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 625,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9978:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:71:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 631,
												"nodeType": "ExpressionStatement",
												"src": "9978:71:1"
											},
											{
												"id": 644,
												"nodeType": "UncheckedBlock",
												"src": "10059:194:1",
												"statements": [
													{
														"expression": {
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 632,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 187,
																	"src": "10083:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 634,
																"indexExpression": {
																	"id": 633,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 595,
																	"src": "10093:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10083:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 635,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "10104:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 636,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 597,
																	"src": "10121:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10104:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10083:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 639,
														"nodeType": "ExpressionStatement",
														"src": "10083:44:1"
													},
													{
														"expression": {
															"id": 642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 640,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 195,
																"src": "10220:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 641,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "10236:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10220:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 643,
														"nodeType": "ExpressionStatement",
														"src": "10220:22:1"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 646,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "10277:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 649,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10294:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 648,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10286:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 647,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10286:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 650,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10286:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 651,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "10298:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 645,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 792,
														"src": "10268:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10268:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 653,
												"nodeType": "EmitStatement",
												"src": "10263:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 655,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "10336:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 658,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10353:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10345:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 656,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10345:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 659,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10345:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 660,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "10357:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "10316:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10316:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 662,
												"nodeType": "ExpressionStatement",
												"src": "10316:48:1"
											}
										]
									},
									"documentation": {
										"id": 593,
										"nodeType": "StructuredDocumentation",
										"src": "9398:309:1",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9721:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9735:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "9727:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9727:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9752:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "9744:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9744:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9726:33:1"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9777:0:1"
									},
									"scope": 780,
									"src": "9712:659:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "10877:257:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 680,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 675,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 667,
																"src": "10895:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10912:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10904:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 676,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10904:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 679,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10904:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10895:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 681,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10916:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 674,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10887:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10887:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 683,
												"nodeType": "ExpressionStatement",
												"src": "10887:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 685,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 669,
																"src": "10973:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 688,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10992:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10984:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 686,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10984:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 689,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10984:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10973:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 691,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10996:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 684,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10965:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10965:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 693,
												"nodeType": "ExpressionStatement",
												"src": "10965:68:1"
											},
											{
												"expression": {
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 694,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 193,
																"src": "11044:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 697,
															"indexExpression": {
																"id": 695,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 667,
																"src": "11056:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11044:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 698,
														"indexExpression": {
															"id": 696,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "11063:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11044:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 699,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 671,
														"src": "11074:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11044:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 701,
												"nodeType": "ExpressionStatement",
												"src": "11044:36:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 703,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "11104:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 704,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "11111:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 705,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "11120:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 702,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "11095:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11095:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 707,
												"nodeType": "EmitStatement",
												"src": "11090:37:1"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "10377:412:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10803:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10820:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "10812:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10835:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "10827:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10827:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10852:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "10844:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 670,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10844:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10811:48:1"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10877:0:1"
									},
									"scope": 780,
									"src": "10794:340:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 751,
										"nodeType": "Block",
										"src": "11505:321:1",
										"statements": [
											{
												"assignments": [
													720
												],
												"declarations": [
													{
														"constant": false,
														"id": 720,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11523:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 751,
														"src": "11515:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 719,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11515:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 725,
												"initialValue": {
													"arguments": [
														{
															"id": 722,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "11552:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 723,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 714,
															"src": "11559:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 721,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "11542:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11542:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11515:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 726,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "11581:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11606:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 728,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11606:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 727,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11601:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11601:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11601:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11581:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 750,
												"nodeType": "IfStatement",
												"src": "11577:243:1",
												"trueBody": {
													"id": 749,
													"nodeType": "Block",
													"src": "11620:200:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 736,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 734,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 720,
																			"src": "11642:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 735,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 716,
																			"src": "11662:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11642:26:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11670:31:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 733,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11634:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11634:68:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 739,
															"nodeType": "ExpressionStatement",
															"src": "11634:68:1"
														},
														{
															"id": 748,
															"nodeType": "UncheckedBlock",
															"src": "11716:94:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 741,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 712,
																				"src": "11753:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 742,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 714,
																				"src": "11760:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 743,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 720,
																					"src": "11769:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 744,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "11788:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11769:25:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 740,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 709,
																			"src": "11744:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 746,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11744:51:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 747,
																	"nodeType": "ExpressionStatement",
																	"src": "11744:51:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "11140:270:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11424:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11448:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "11440:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 711,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11463:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "11455:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11455:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11480:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "11472:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11472:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11439:48:1"
									},
									"returnParameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11505:0:1"
									},
									"scope": 780,
									"src": "11415:411:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 762,
										"nodeType": "Block",
										"src": "12499:2:1",
										"statements": []
									},
									"documentation": {
										"id": 753,
										"nodeType": "StructuredDocumentation",
										"src": "11832:573:1",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 763,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12419:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12448:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "12440:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12462:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "12454:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12454:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12474:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "12466:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12466:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12439:42:1"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12499:0:1"
									},
									"scope": 780,
									"src": "12410:91:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 773,
										"nodeType": "Block",
										"src": "13177:2:1",
										"statements": []
									},
									"documentation": {
										"id": 764,
										"nodeType": "StructuredDocumentation",
										"src": "12507:577:1",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13098:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13126:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "13118:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 765,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13118:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13140:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "13132:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13132:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13152:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "13144:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13144:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13117:42:1"
									},
									"returnParameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13177:0:1"
									},
									"scope": 780,
									"src": "13089:90:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 775,
										"nodeType": "StructuredDocumentation",
										"src": "13185:254:1",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 779,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13464:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 780,
									"src": "13444:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 776,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13444:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 778,
										"length": {
											"hexValue": "3435",
											"id": 777,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13452:2:1",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13444:11:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 781,
							"src": "1611:11861:1",
							"usedErrors": []
						}
					],
					"src": "105:13368:1"
				},
				"id": 1
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							858
						]
					},
					"id": 859,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 782,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 783,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 858,
							"linearizedBaseContracts": [
								858
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 784,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 792,
									"name": "Transfer",
									"nameLocation": "405:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "414:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 785,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 788,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "436:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 787,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 790,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "456:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:2"
									},
									"src": "399:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 801,
									"name": "Approval",
									"nameLocation": "636:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "645:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "668:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "693:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:2"
									},
									"src": "630:78:2"
								},
								{
									"documentation": {
										"id": 802,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 807,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:2"
									},
									"returnParameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "831:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:2"
									},
									"scope": 858,
									"src": "785:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 808,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 815,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "942:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:2"
									},
									"returnParameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "982:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:2"
									},
									"scope": 858,
									"src": "923:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 816,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 825,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "1222:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "1234:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 819,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:2"
									},
									"returnParameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "1268:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 822,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:2"
									},
									"scope": 858,
									"src": "1204:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 826,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 835,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 835,
												"src": "1568:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 835,
												"src": "1583:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:2"
									},
									"returnParameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 835,
												"src": "1623:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:2"
									},
									"scope": 858,
									"src": "1549:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 836,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 845,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 838,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "2302:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 837,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "2319:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:2"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "2353:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 842,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:2"
									},
									"scope": 858,
									"src": "2285:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 846,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 857,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2679:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2701:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2693:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2713:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2705:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2705:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:42:2"
									},
									"returnParameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "2739:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 854,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2739:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2738:6:2"
									},
									"scope": 858,
									"src": "2657:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 859,
							"src": "202:2545:2",
							"usedErrors": []
						}
					],
					"src": "106:2642:2"
				},
				"id": 2
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							883
						],
						"IERC20Upgradeable": [
							858
						]
					},
					"id": 884,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 860,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:3"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 861,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 884,
							"sourceUnit": 859,
							"src": "135:34:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 863,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 858,
										"src": "327:17:3"
									},
									"id": 864,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 862,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:3",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 883,
							"linearizedBaseContracts": [
								883,
								858
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 870,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:3"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "449:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 867,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:3"
									},
									"scope": 883,
									"src": "410:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 871,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "572:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 873,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:3"
									},
									"scope": 883,
									"src": "531:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 877,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 882,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:3"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "706:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 879,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:3"
									},
									"scope": 883,
									"src": "663:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 884,
							"src": "288:427:3",
							"usedErrors": []
						}
					],
					"src": "110:606:3"
				},
				"id": 3
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1167
						]
					},
					"id": 1168,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 885,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 886,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1167,
							"linearizedBaseContracts": [
								1167
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 900,
										"nodeType": "Block",
										"src": "1489:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 894,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 889,
																"src": "1713:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 895,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1713:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 896,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1713:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1713:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 893,
												"id": 899,
												"nodeType": "Return",
												"src": "1706:30:4"
											}
										]
									},
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "227:1191:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1432:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1451:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "1443:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:17:4"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "1483:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 891,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1483:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:6:4"
									},
									"scope": 1167,
									"src": "1423:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 934,
										"nodeType": "Block",
										"src": "2730:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 912,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2756:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1167",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1167",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2748:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 910,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2748:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 913,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2748:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2748:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 915,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 906,
																"src": "2773:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2748:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 917,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2781:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 909,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2740:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2740:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 919,
												"nodeType": "ExpressionStatement",
												"src": "2740:73:4"
											},
											{
												"assignments": [
													921,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 921,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2830:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 934,
														"src": "2825:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 920,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2825:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 928,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 926,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2873:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 922,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 904,
																"src": "2843:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2843:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 925,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 924,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 906,
																"src": "2865:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2843:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2843:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2824:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 930,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 921,
															"src": "2894:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 931,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2903:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 929,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2886:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 932,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2886:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 933,
												"nodeType": "ExpressionStatement",
												"src": "2886:78:4"
											}
										]
									},
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "1749:905:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 935,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2668:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2694:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "2678:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 903,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2678:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2713:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "2705:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2705:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2677:43:4"
									},
									"returnParameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2730:0:4"
									},
									"scope": 1167,
									"src": "2659:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 952,
										"nodeType": "Block",
										"src": "3802:96:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 946,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 938,
															"src": "3841:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 947,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 940,
															"src": "3849:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 948,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3855:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3858:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 945,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															993,
															1037
														],
														"referencedDeclaration": 1037,
														"src": "3819:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3819:72:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 944,
												"id": 951,
												"nodeType": "Return",
												"src": "3812:79:4"
											}
										]
									},
									"documentation": {
										"id": 936,
										"nodeType": "StructuredDocumentation",
										"src": "2977:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 953,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3722:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3743:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "3735:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3735:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3764:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "3751:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 939,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3751:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3734:35:4"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "3788:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 942,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3788:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3787:14:4"
									},
									"scope": 1167,
									"src": "3713:185:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "4267:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 966,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 956,
															"src": "4306:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 967,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 958,
															"src": "4314:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4320:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 969,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 960,
															"src": "4323:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 965,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															993,
															1037
														],
														"referencedDeclaration": 1037,
														"src": "4284:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4284:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 964,
												"id": 971,
												"nodeType": "Return",
												"src": "4277:59:4"
											}
										]
									},
									"documentation": {
										"id": 954,
										"nodeType": "StructuredDocumentation",
										"src": "3904:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4129:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4159:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "4151:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4151:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4188:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "4175:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 957,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4175:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4216:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "4202:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 959,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4202:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4141:93:4"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "4253:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 962,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4253:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:14:4"
									},
									"scope": 1167,
									"src": "4120:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "4818:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 986,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 976,
															"src": "4857:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 987,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "4865:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 988,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "4871:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 989,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4878:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 985,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															993,
															1037
														],
														"referencedDeclaration": 1037,
														"src": "4835:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4835:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 984,
												"id": 991,
												"nodeType": "Return",
												"src": "4828:94:4"
											}
										]
									},
									"documentation": {
										"id": 974,
										"nodeType": "StructuredDocumentation",
										"src": "4349:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4714:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4744:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "4736:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4736:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4765:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "4752:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 977,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4752:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4779:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "4771:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4735:50:4"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "4804:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 982,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4804:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4803:14:4"
									},
									"scope": 1167,
									"src": "4705:224:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1036,
										"nodeType": "Block",
										"src": "5356:267:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1010,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5382:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1167",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1167",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1009,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5374:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1008,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5374:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5374:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1012,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5374:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1013,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1000,
																"src": "5399:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5374:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1015,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5406:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1007,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5366:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5366:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1017,
												"nodeType": "ExpressionStatement",
												"src": "5366:81:4"
											},
											{
												"assignments": [
													1019,
													1021
												],
												"declarations": [
													{
														"constant": false,
														"id": 1019,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5463:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1036,
														"src": "5458:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1018,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5458:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1021,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5485:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 1036,
														"src": "5472:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1020,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5472:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1028,
												"initialValue": {
													"arguments": [
														{
															"id": 1026,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 998,
															"src": "5525:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1022,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "5499:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5499:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1025,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1024,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1000,
																"src": "5518:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5499:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5499:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5457:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1030,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 996,
															"src": "5574:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1031,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1019,
															"src": "5582:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1032,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "5591:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1033,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "5603:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1029,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1122,
														"src": "5547:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5547:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1006,
												"id": 1035,
												"nodeType": "Return",
												"src": "5540:76:4"
											}
										]
									},
									"documentation": {
										"id": 994,
										"nodeType": "StructuredDocumentation",
										"src": "4935:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1037,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5186:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5225:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5217:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5217:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5254:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5241:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 997,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5241:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5276:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5268:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5268:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5305:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5291:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1001,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5291:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5207:116:4"
									},
									"returnParameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5342:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1004,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5342:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5341:14:4"
									},
									"scope": 1167,
									"src": "5177:446:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1053,
										"nodeType": "Block",
										"src": "5900:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1048,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1040,
															"src": "5936:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1049,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "5944:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1050,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5950:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1047,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1054,
															1083
														],
														"referencedDeclaration": 1083,
														"src": "5917:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5917:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1046,
												"id": 1052,
												"nodeType": "Return",
												"src": "5910:80:4"
											}
										]
									},
									"documentation": {
										"id": 1038,
										"nodeType": "StructuredDocumentation",
										"src": "5629:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1054,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5809:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5836:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "5828:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1039,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5828:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5857:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "5844:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1041,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5844:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5827:35:4"
									},
									"returnParameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "5886:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1044,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5886:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5885:14:4"
									},
									"scope": 1167,
									"src": "5800:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "6339:168:4",
										"statements": [
											{
												"assignments": [
													1067,
													1069
												],
												"declarations": [
													{
														"constant": false,
														"id": 1067,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6355:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1082,
														"src": "6350:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1066,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6350:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1069,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6377:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 1082,
														"src": "6364:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1068,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6364:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1074,
												"initialValue": {
													"arguments": [
														{
															"id": 1072,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1059,
															"src": "6409:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1070,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1057,
															"src": "6391:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6391:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6391:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6349:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1076,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1057,
															"src": "6458:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1077,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "6466:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1078,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "6475:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1079,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "6487:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1075,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1122,
														"src": "6431:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6431:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1065,
												"id": 1081,
												"nodeType": "Return",
												"src": "6424:76:4"
											}
										]
									},
									"documentation": {
										"id": 1055,
										"nodeType": "StructuredDocumentation",
										"src": "6003:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6190:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6226:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "6218:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6218:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6255:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "6242:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1058,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6242:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6283:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "6269:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1060,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6269:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6208:93:4"
									},
									"returnParameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "6325:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1063,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6325:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6324:14:4"
									},
									"scope": 1167,
									"src": "6181:326:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1121,
										"nodeType": "Block",
										"src": "6989:434:4",
										"statements": [
											{
												"condition": {
													"id": 1097,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1088,
													"src": "7003:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1119,
													"nodeType": "Block",
													"src": "7359:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1115,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1090,
																		"src": "7381:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1116,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1092,
																		"src": "7393:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1114,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1166,
																	"src": "7373:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7373:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1118,
															"nodeType": "ExpressionStatement",
															"src": "7373:33:4"
														}
													]
												},
												"id": 1120,
												"nodeType": "IfStatement",
												"src": "6999:418:4",
												"trueBody": {
													"id": 1113,
													"nodeType": "Block",
													"src": "7012:341:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1101,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1098,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1090,
																		"src": "7030:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1099,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7030:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7051:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7030:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1110,
															"nodeType": "IfStatement",
															"src": "7026:286:4",
															"trueBody": {
																"id": 1109,
																"nodeType": "Block",
																"src": "7054:258:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1104,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1086,
																							"src": "7256:6:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1103,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 901,
																						"src": "7245:10:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1105,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7245:18:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1106,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7265:31:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1102,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7237:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7237:60:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1108,
																		"nodeType": "ExpressionStatement",
																		"src": "7237:60:4"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1111,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1090,
																"src": "7332:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1096,
															"id": 1112,
															"nodeType": "Return",
															"src": "7325:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1084,
										"nodeType": "StructuredDocumentation",
										"src": "6513:277:4",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "6804:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6848:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "6840:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1085,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6840:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6869:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "6864:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1087,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6864:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6899:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "6886:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1089,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6886:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6933:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "6919:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1091,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6919:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6830:121:4"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "6975:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1094,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6975:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6974:14:4"
									},
									"scope": 1167,
									"src": "6795:628:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1145,
										"nodeType": "Block",
										"src": "7804:135:4",
										"statements": [
											{
												"condition": {
													"id": 1134,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1125,
													"src": "7818:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1143,
													"nodeType": "Block",
													"src": "7875:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1139,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1127,
																		"src": "7897:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1140,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1129,
																		"src": "7909:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1138,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1166,
																	"src": "7889:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7889:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1142,
															"nodeType": "ExpressionStatement",
															"src": "7889:33:4"
														}
													]
												},
												"id": 1144,
												"nodeType": "IfStatement",
												"src": "7814:119:4",
												"trueBody": {
													"id": 1137,
													"nodeType": "Block",
													"src": "7827:42:4",
													"statements": [
														{
															"expression": {
																"id": 1135,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1127,
																"src": "7848:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1133,
															"id": 1136,
															"nodeType": "Return",
															"src": "7841:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1123,
										"nodeType": "StructuredDocumentation",
										"src": "7429:210:4",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7653:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7684:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "7679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1124,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7679:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7714:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "7701:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7701:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7748:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "7734:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1128,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7734:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7669:97:4"
									},
									"returnParameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "7790:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1131,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7790:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7789:14:4"
									},
									"scope": 1167,
									"src": "7644:295:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1165,
										"nodeType": "Block",
										"src": "8028:457:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1153,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1148,
															"src": "8104:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1154,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8104:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8124:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8104:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1163,
													"nodeType": "Block",
													"src": "8434:45:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1160,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1150,
																		"src": "8455:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1159,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "8448:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8448:20:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1162,
															"nodeType": "ExpressionStatement",
															"src": "8448:20:4"
														}
													]
												},
												"id": 1164,
												"nodeType": "IfStatement",
												"src": "8100:379:4",
												"trueBody": {
													"id": 1158,
													"nodeType": "Block",
													"src": "8127:301:4",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8285:133:4",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8303:40:4",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "8332:10:4"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8326:5:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8326:17:4"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8307:15:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8371:2:4",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "8375:10:4"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8367:3:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8367:19:4"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "8388:15:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8360:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8360:44:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8360:44:4"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1148,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8332:10:4",
																	"valueSize": 1
																},
																{
																	"declaration": 1148,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8375:10:4",
																	"valueSize": 1
																}
															],
															"id": 1157,
															"nodeType": "InlineAssembly",
															"src": "8276:142:4"
														}
													]
												}
											}
										]
									},
									"id": 1166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "7954:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7975:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "7962:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1147,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7962:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8001:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "7987:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1149,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7987:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7961:53:4"
									},
									"returnParameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8028:0:4"
									},
									"scope": 1167,
									"src": "7945:540:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1168,
							"src": "194:8293:4",
							"usedErrors": []
						}
					],
					"src": "101:8387:4"
				},
				"id": 4
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1167
						],
						"ContextUpgradeable": [
							1209
						],
						"Initializable": [
							168
						]
					},
					"id": 1210,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1169,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1170,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1210,
							"sourceUnit": 169,
							"src": "110:42:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1172,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 168,
										"src": "691:13:5"
									},
									"id": 1173,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:5"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1171,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1209,
							"linearizedBaseContracts": [
								1209,
								168
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1178,
										"nodeType": "Block",
										"src": "763:7:5",
										"statements": []
									},
									"id": 1179,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1176,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1175,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "746:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:5"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:5"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:5"
									},
									"scope": 1209,
									"src": "711:59:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1184,
										"nodeType": "Block",
										"src": "838:7:5",
										"statements": []
									},
									"id": 1185,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1182,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1181,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "821:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:5"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:5"
									},
									"returnParameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:5"
									},
									"scope": 1209,
									"src": "776:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1193,
										"nodeType": "Block",
										"src": "912:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1190,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1189,
												"id": 1192,
												"nodeType": "Return",
												"src": "922:17:5"
											}
										]
									},
									"id": 1194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:5"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "903:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:5"
									},
									"scope": 1209,
									"src": "850:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1202,
										"nodeType": "Block",
										"src": "1019:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1199,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1198,
												"id": 1201,
												"nodeType": "Return",
												"src": "1029:15:5"
											}
										]
									},
									"id": 1203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:5"
									},
									"returnParameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1203,
												"src": "1003:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1196,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:5"
									},
									"scope": 1209,
									"src": "952:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1204,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:5",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1208,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 1209,
									"src": "1316:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1205,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1207,
										"length": {
											"hexValue": "3530",
											"id": 1206,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:5",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1210,
							"src": "651:693:5",
							"usedErrors": []
						}
					],
					"src": "86:1259:5"
				},
				"id": 5
			},
			"src/interfaces/IERC20Plus.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IERC20Plus.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1167
						],
						"ContextUpgradeable": [
							1209
						],
						"ERC20Upgradeable": [
							780
						],
						"IERC20MetadataUpgradeable": [
							883
						],
						"IERC20Plus": [
							1238
						],
						"IERC20Upgradeable": [
							858
						],
						"Initializable": [
							168
						]
					},
					"id": 1239,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1211,
							"literals": [
								"solidity",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "31:22:6"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol",
							"id": 1212,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1239,
							"sourceUnit": 781,
							"src": "55:131:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1213,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 858,
										"src": "212:17:6"
									},
									"id": 1214,
									"nodeType": "InheritanceSpecifier",
									"src": "212:17:6"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1238,
							"linearizedBaseContracts": [
								1238,
								858
							],
							"name": "IERC20Plus",
							"nameLocation": "198:10:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "40c10f19",
									"id": 1223,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "245:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "beneficiary",
												"nameLocation": "258:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "250:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "250:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "279:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "271:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "271:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "249:37:6"
									},
									"returnParameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "305:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1220,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "305:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "304:6:6"
									},
									"scope": 1238,
									"src": "236:75:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "9dc29fac",
									"id": 1232,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "325:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "who",
												"nameLocation": "338:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "330:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "330:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "351:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "343:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "343:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "329:29:6"
									},
									"returnParameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "377:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1229,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "377:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "376:6:6"
									},
									"scope": 1238,
									"src": "316:67:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 1237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "397:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "405:2:6"
									},
									"returnParameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "431:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1234,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "431:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:7:6"
									},
									"scope": 1238,
									"src": "388:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1239,
							"src": "188:252:6",
							"usedErrors": []
						}
					],
					"src": "31:409:6"
				},
				"id": 6
			}
		}
	}
}